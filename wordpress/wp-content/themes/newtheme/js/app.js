webpackJsonp([0],[,,function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function($, _) {\n\n/* eslint-disable */\nmodule.exports = {\n\n  registrationCacheKey: 'data',\n  returnCacheKey: 'data',\n  initLocalStorage: function initLocalStorage() {\n    var storage = $.initNamespaceStorage('registration-local-storage').localStorage;\n    return storage;\n  },\n  initLocalStorage2: function initLocalStorage2() {\n    var storage2 = $.initNamespaceStorage('return-local-storage').localStorage;\n    return storage2;\n  },\n  saveInLocalStorage: function saveInLocalStorage(data) {\n    this.initLocalStorage().set(this.registrationCacheKey, data);\n  },\n  saveInLocalStorage2: function saveInLocalStorage2(data) {\n    this.initLocalStorage2().set(this.returnCacheKey, data);\n  },\n  getFromLocalStorage: function getFromLocalStorage() {\n    if (!this.initLocalStorage().get(this.registrationCacheKey)) {\n      this.reset();\n    }\n    return this.initLocalStorage().get(this.registrationCacheKey);\n  },\n  getFromLocalStorage2: function getFromLocalStorage2() {\n    if (!this.initLocalStorage2().get(this.returnCacheKey)) {\n      this.reset2();\n    }\n    return this.initLocalStorage2().get(this.returnCacheKey);\n  },\n  reset: function reset() {\n    var data = {\n      hasData: false,\n      registration: {}\n    };\n\n    this.saveInLocalStorage(data);\n  },\n  reset2: function reset2() {\n    var data = {\n      hasData: false,\n      return: {}\n    };\n\n    this.saveInLocalStorage2(data);\n  },\n  getRegistration: function getRegistration() {\n    var data = this.getFromLocalStorage();\n    var registrationData = data.registration;\n\n    return registrationData;\n  },\n  getReturn: function getReturn() {\n    var data = this.getFromLocalStorage2();\n    var returnData = data.return;\n\n    return returnData;\n  },\n  setRegistration: function setRegistration(additionalData) {\n    var data = this.getFromLocalStorage();\n    console.log(data);\n    var registrationData = data.registration;\n\n    _.extend(registrationData, additionalData);\n    data.registration = registrationData;\n\n    this.saveInLocalStorage(data);\n  },\n  setReturn: function setReturn(additionalData) {\n    var data = this.getFromLocalStorage2();\n    console.log(data);\n    var returnData = data.return;\n\n    _.extend(returnData, additionalData);\n    data.return = returnData;\n\n    this.saveInLocalStorage2(data);\n  }\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9uZXd0aGVtZS9qcy9mdW5jdGlvbnMvc3RvcmFnZS1hcGkuanM/YWU0MiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVnaXN0cmF0aW9uQ2FjaGVLZXkiLCJyZXR1cm5DYWNoZUtleSIsImluaXRMb2NhbFN0b3JhZ2UiLCJzdG9yYWdlIiwiJCIsImluaXROYW1lc3BhY2VTdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwiaW5pdExvY2FsU3RvcmFnZTIiLCJzdG9yYWdlMiIsInNhdmVJbkxvY2FsU3RvcmFnZSIsImRhdGEiLCJzZXQiLCJzYXZlSW5Mb2NhbFN0b3JhZ2UyIiwiZ2V0RnJvbUxvY2FsU3RvcmFnZSIsImdldCIsInJlc2V0IiwiZ2V0RnJvbUxvY2FsU3RvcmFnZTIiLCJyZXNldDIiLCJoYXNEYXRhIiwicmVnaXN0cmF0aW9uIiwicmV0dXJuIiwiZ2V0UmVnaXN0cmF0aW9uIiwicmVnaXN0cmF0aW9uRGF0YSIsImdldFJldHVybiIsInJldHVybkRhdGEiLCJzZXRSZWdpc3RyYXRpb24iLCJhZGRpdGlvbmFsRGF0YSIsImNvbnNvbGUiLCJsb2ciLCJfIiwiZXh0ZW5kIiwic2V0UmV0dXJuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0FBLE9BQU9DLE9BQVAsR0FBaUI7O0FBRWZDLHdCQUFzQixNQUZQO0FBR2ZDLGtCQUFnQixNQUhEO0FBSWZDLGtCQUplLDhCQUlLO0FBQ2xCLFFBQU1DLFVBQVVDLEVBQUVDLG9CQUFGLENBQXVCLDRCQUF2QixFQUFxREMsWUFBckU7QUFDQSxXQUFPSCxPQUFQO0FBQ0QsR0FQYztBQVFmSSxtQkFSZSwrQkFRTTtBQUNuQixRQUFNQyxXQUFXSixFQUFFQyxvQkFBRixDQUF1QixzQkFBdkIsRUFBK0NDLFlBQWhFO0FBQ0EsV0FBT0UsUUFBUDtBQUNELEdBWGM7QUFZZkMsb0JBWmUsOEJBWUtDLElBWkwsRUFZVztBQUN4QixTQUFLUixnQkFBTCxHQUNHUyxHQURILENBQ08sS0FBS1gsb0JBRFosRUFDa0NVLElBRGxDO0FBRUQsR0FmYztBQWdCZkUscUJBaEJlLCtCQWdCTUYsSUFoQk4sRUFnQlk7QUFDekIsU0FBS0gsaUJBQUwsR0FDR0ksR0FESCxDQUNPLEtBQUtWLGNBRFosRUFDNEJTLElBRDVCO0FBRUQsR0FuQmM7QUFvQmZHLHFCQXBCZSxpQ0FvQlE7QUFDckIsUUFBSSxDQUFDLEtBQUtYLGdCQUFMLEdBQ0FZLEdBREEsQ0FDSSxLQUFLZCxvQkFEVCxDQUFMLEVBQ3FDO0FBQ25DLFdBQUtlLEtBQUw7QUFDRDtBQUNELFdBQU8sS0FBS2IsZ0JBQUwsR0FDSlksR0FESSxDQUNBLEtBQUtkLG9CQURMLENBQVA7QUFFRCxHQTNCYztBQTRCZmdCLHNCQTVCZSxrQ0E0QlM7QUFDdEIsUUFBSSxDQUFDLEtBQUtULGlCQUFMLEdBQ0FPLEdBREEsQ0FDSSxLQUFLYixjQURULENBQUwsRUFDK0I7QUFDN0IsV0FBS2dCLE1BQUw7QUFDRDtBQUNELFdBQU8sS0FBS1YsaUJBQUwsR0FDSk8sR0FESSxDQUNBLEtBQUtiLGNBREwsQ0FBUDtBQUVELEdBbkNjO0FBb0NmYyxPQXBDZSxtQkFvQ047QUFDUCxRQUFNTCxPQUFPO0FBQ1hRLGVBQVMsS0FERTtBQUVYQyxvQkFBYztBQUZILEtBQWI7O0FBS0EsU0FBS1Ysa0JBQUwsQ0FBd0JDLElBQXhCO0FBQ0QsR0EzQ2M7QUE0Q2ZPLFFBNUNlLG9CQTRDTDtBQUNSLFFBQU1QLE9BQU87QUFDWFEsZUFBUyxLQURFO0FBRVhFLGNBQVE7QUFGRyxLQUFiOztBQUtBLFNBQUtSLG1CQUFMLENBQXlCRixJQUF6QjtBQUNELEdBbkRjO0FBb0RmVyxpQkFwRGUsNkJBb0RJO0FBQ2pCLFFBQU1YLE9BQU8sS0FBS0csbUJBQUwsRUFBYjtBQUNBLFFBQU1TLG1CQUFtQlosS0FBS1MsWUFBOUI7O0FBRUEsV0FBT0csZ0JBQVA7QUFDRCxHQXpEYztBQTBEZkMsV0ExRGUsdUJBMERGO0FBQ1gsUUFBTWIsT0FBTyxLQUFLTSxvQkFBTCxFQUFiO0FBQ0EsUUFBTVEsYUFBYWQsS0FBS1UsTUFBeEI7O0FBRUEsV0FBT0ksVUFBUDtBQUNELEdBL0RjO0FBZ0VmQyxpQkFoRWUsMkJBZ0VFQyxjQWhFRixFQWdFa0I7QUFDL0IsUUFBTWhCLE9BQU8sS0FBS0csbUJBQUwsRUFBYjtBQUNBYyxZQUFRQyxHQUFSLENBQVlsQixJQUFaO0FBQ0EsUUFBTVksbUJBQW1CWixLQUFLUyxZQUE5Qjs7QUFFQVUsTUFBRUMsTUFBRixDQUFTUixnQkFBVCxFQUEyQkksY0FBM0I7QUFDQWhCLFNBQUtTLFlBQUwsR0FBb0JHLGdCQUFwQjs7QUFFQSxTQUFLYixrQkFBTCxDQUF3QkMsSUFBeEI7QUFDRCxHQXpFYztBQTBFZnFCLFdBMUVlLHFCQTBFSkwsY0ExRUksRUEwRVk7QUFDekIsUUFBTWhCLE9BQU8sS0FBS00sb0JBQUwsRUFBYjtBQUNBVyxZQUFRQyxHQUFSLENBQVlsQixJQUFaO0FBQ0EsUUFBTWMsYUFBYWQsS0FBS1UsTUFBeEI7O0FBRUFTLE1BQUVDLE1BQUYsQ0FBU04sVUFBVCxFQUFxQkUsY0FBckI7QUFDQWhCLFNBQUtVLE1BQUwsR0FBY0ksVUFBZDs7QUFFQSxTQUFLWixtQkFBTCxDQUF5QkYsSUFBekI7QUFDRDtBQW5GYyxDQUFqQixDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHJcbiAgcmVnaXN0cmF0aW9uQ2FjaGVLZXk6ICdkYXRhJyxcclxuICByZXR1cm5DYWNoZUtleTogJ2RhdGEnLFxyXG4gIGluaXRMb2NhbFN0b3JhZ2UgKCkge1xyXG4gICAgY29uc3Qgc3RvcmFnZSA9ICQuaW5pdE5hbWVzcGFjZVN0b3JhZ2UoJ3JlZ2lzdHJhdGlvbi1sb2NhbC1zdG9yYWdlJykubG9jYWxTdG9yYWdlO1xyXG4gICAgcmV0dXJuIHN0b3JhZ2U7XHJcbiAgfSxcclxuICBpbml0TG9jYWxTdG9yYWdlMiAoKSB7XHJcbiAgICBjb25zdCBzdG9yYWdlMiA9ICQuaW5pdE5hbWVzcGFjZVN0b3JhZ2UoJ3JldHVybi1sb2NhbC1zdG9yYWdlJykubG9jYWxTdG9yYWdlO1xyXG4gICAgcmV0dXJuIHN0b3JhZ2UyO1xyXG4gIH0sXHJcbiAgc2F2ZUluTG9jYWxTdG9yYWdlIChkYXRhKSB7XHJcbiAgICB0aGlzLmluaXRMb2NhbFN0b3JhZ2UoKVxyXG4gICAgICAuc2V0KHRoaXMucmVnaXN0cmF0aW9uQ2FjaGVLZXksIGRhdGEpO1xyXG4gIH0sXHJcbiAgc2F2ZUluTG9jYWxTdG9yYWdlMiAoZGF0YSkge1xyXG4gICAgdGhpcy5pbml0TG9jYWxTdG9yYWdlMigpXHJcbiAgICAgIC5zZXQodGhpcy5yZXR1cm5DYWNoZUtleSwgZGF0YSk7XHJcbiAgfSxcclxuICBnZXRGcm9tTG9jYWxTdG9yYWdlICgpIHtcclxuICAgIGlmICghdGhpcy5pbml0TG9jYWxTdG9yYWdlKClcclxuICAgICAgICAuZ2V0KHRoaXMucmVnaXN0cmF0aW9uQ2FjaGVLZXkpKSB7XHJcbiAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmluaXRMb2NhbFN0b3JhZ2UoKVxyXG4gICAgICAuZ2V0KHRoaXMucmVnaXN0cmF0aW9uQ2FjaGVLZXkpO1xyXG4gIH0sXHJcbiAgZ2V0RnJvbUxvY2FsU3RvcmFnZTIgKCkge1xyXG4gICAgaWYgKCF0aGlzLmluaXRMb2NhbFN0b3JhZ2UyKClcclxuICAgICAgICAuZ2V0KHRoaXMucmV0dXJuQ2FjaGVLZXkpKSB7XHJcbiAgICAgIHRoaXMucmVzZXQyKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5pbml0TG9jYWxTdG9yYWdlMigpXHJcbiAgICAgIC5nZXQodGhpcy5yZXR1cm5DYWNoZUtleSk7XHJcbiAgfSxcclxuICByZXNldCAoKSB7XHJcbiAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICBoYXNEYXRhOiBmYWxzZSxcclxuICAgICAgcmVnaXN0cmF0aW9uOiB7fSxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zYXZlSW5Mb2NhbFN0b3JhZ2UoZGF0YSk7XHJcbiAgfSxcclxuICByZXNldDIgKCkge1xyXG4gICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgaGFzRGF0YTogZmFsc2UsXHJcbiAgICAgIHJldHVybjoge30sXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2F2ZUluTG9jYWxTdG9yYWdlMihkYXRhKTtcclxuICB9LFxyXG4gIGdldFJlZ2lzdHJhdGlvbiAoKSB7XHJcbiAgICBjb25zdCBkYXRhID0gdGhpcy5nZXRGcm9tTG9jYWxTdG9yYWdlKCk7XHJcbiAgICBjb25zdCByZWdpc3RyYXRpb25EYXRhID0gZGF0YS5yZWdpc3RyYXRpb247XHJcblxyXG4gICAgcmV0dXJuIHJlZ2lzdHJhdGlvbkRhdGE7XHJcbiAgfSxcclxuICBnZXRSZXR1cm4gKCkge1xyXG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RnJvbUxvY2FsU3RvcmFnZTIoKTtcclxuICAgIGNvbnN0IHJldHVybkRhdGEgPSBkYXRhLnJldHVybjtcclxuXHJcbiAgICByZXR1cm4gcmV0dXJuRGF0YTtcclxuICB9LFxyXG4gIHNldFJlZ2lzdHJhdGlvbiAoYWRkaXRpb25hbERhdGEpIHtcclxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldEZyb21Mb2NhbFN0b3JhZ2UoKTtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgY29uc3QgcmVnaXN0cmF0aW9uRGF0YSA9IGRhdGEucmVnaXN0cmF0aW9uO1xyXG5cclxuICAgIF8uZXh0ZW5kKHJlZ2lzdHJhdGlvbkRhdGEsIGFkZGl0aW9uYWxEYXRhKTtcclxuICAgIGRhdGEucmVnaXN0cmF0aW9uID0gcmVnaXN0cmF0aW9uRGF0YTtcclxuXHJcbiAgICB0aGlzLnNhdmVJbkxvY2FsU3RvcmFnZShkYXRhKTtcclxuICB9LFxyXG4gIHNldFJldHVybiAoYWRkaXRpb25hbERhdGEpIHtcclxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldEZyb21Mb2NhbFN0b3JhZ2UyKCk7XHJcbiAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgIGNvbnN0IHJldHVybkRhdGEgPSBkYXRhLnJldHVybjtcclxuXHJcbiAgICBfLmV4dGVuZChyZXR1cm5EYXRhLCBhZGRpdGlvbmFsRGF0YSk7XHJcbiAgICBkYXRhLnJldHVybiA9IHJldHVybkRhdGE7XHJcblxyXG4gICAgdGhpcy5zYXZlSW5Mb2NhbFN0b3JhZ2UyKGRhdGEpO1xyXG4gIH0sXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25ld3RoZW1lL2pzL2Z1bmN0aW9ucy9zdG9yYWdlLWFwaS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function($) {\n\nvar _size = __webpack_require__(4);\n\nvar _size2 = _interopRequireDefault(_size);\n\nvar _storageApi = __webpack_require__(2);\n\nvar _storageApi2 = _interopRequireDefault(_storageApi);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*eslint-disable*/\nmodule.exports = {\n  changeImgSource: function changeImgSource(element, mobileSrc, desktopSrc) {\n    if (_size2.default.current === \'screen-xxs\' || _size2.default.current === \'screen-xs\' || _size2.default.current === \'screen-sm\') {\n      $(element).attr(\'src\', $(element).data(mobileSrc));\n    } else {\n      $(element).attr(\'src\', $(element).data(desktopSrc));\n    }\n  },\n  backGroundElementSrc: function backGroundElementSrc(element) {\n    var src = $(element).data(\'src\');\n    $(element).css({\n      \'background-image\': \'url(\' + src + \')\'\n    });\n  },\n  setEqualBoxHeight: function setEqualBoxHeight(element) {\n    var maxHeight = 0;\n    $(element).each(function () {\n      if ($(this).height() > maxHeight) {\n        maxHeight = $(this).height();\n      }\n    });\n    $(element).height(maxHeight);\n  },\n  backgroundFix: function backgroundFix(element) {\n    $(element).css(\'background-attachment\', \'scroll\');\n    $(window).scroll(function () {\n      var scrollTop = $(window).scrollTop();\n      var photoTop = $(element).offset().top;\n      var distance = photoTop - scrollTop;\n      $(element).css(\'background-position\', \'center \' + distance * -1 + \'px\');\n    });\n  },\n  customSelectState: function customSelectState(element) {\n\n    $(element).each(function () {\n      var classes = $(this).attr(\'class\');\n      var id = $(this).attr(\'id\');\n      var name = $(this).attr(\'name\');\n      var template = \'<div class="\' + classes + \'">\';\n      template += \'<span class="custom-select-trigger">\' + $(this).attr("placeholder") + \'</span>\';\n      template += \'<div class="custom-options">\';\n      $(this).find("option").each(function () {\n        template += \'<span class="custom-option" data-value="\' + $(this).attr("value") + \'">\' + $(this).html() + \'</span>\';\n      });\n\n      template += \'</div>\';\n      template += \'<div id="state-error" class="custom-invalid" style="display: none;">Field is required</div>\';\n      template += \'</div>\';\n\n      $(this).wrap(\'<div class="custom-select-wrapper"></div>\');\n      $(this).after(template);\n    });\n\n    $(".custom-select-trigger").on("click", function () {\n      $(\'html\').one(\'click\', function () {\n        $(".custom-select-state").removeClass("opened");\n      });\n      $(this).parents(".custom-select-state").toggleClass("opened");\n      event.stopPropagation();\n    });\n    $(".custom-option").on("click", function () {\n      $(this).parents(".custom-select-wrapper").find("select").val($(this).data("value"));\n      if ($(this).data("value") !== \'State\') {\n        $(\'#state-error\').hide();\n      }\n      _storageApi2.default.setRegistration({ state: $(this).data("value") });\n      $(this).parents(".custom-options").find(".custom-option").removeClass("selection");\n      $(this).addClass("selection");\n      $(this).parents(".custom-select-state").removeClass("opened");\n      $(this).parents(".custom-select-state").find(".custom-select-trigger").text($(this).text());\n    });\n  },\n  customSelectReason: function customSelectReason(element) {\n\n    $(element).each(function () {\n      var classes = $(this).attr(\'class\');\n      var id = $(this).attr(\'id\');\n      var name = $(this).attr(\'name\');\n      var template = \'<div class="\' + classes + \'">\';\n      template += \'<span class="custom-select-trigger">\' + $(this).attr("placeholder") + \'</span>\';\n      template += \'<div class="custom-options">\';\n      $(this).find("option").each(function () {\n        template += \'<span class="custom-option" data-value="\' + $(this).attr("value") + \'">\' + $(this).html() + \'</span>\';\n      });\n\n      template += \'</div>\';\n      template += \'<div id="reason-error" class="custom-invalid" style="display: none;">Field is required</div>\';\n      template += \'</div>\';\n\n      $(this).wrap(\'<div class="custom-select-wrapper"></div>\');\n      $(this).after(template);\n    });\n\n    $(".custom-select-trigger").on("click", function () {\n      $(\'html\').one(\'click\', function () {\n        $(".custom-select-reason").removeClass("opened");\n      });\n      $(this).parents(".custom-select-reason").toggleClass("opened");\n      event.stopPropagation();\n    });\n    $(".custom-option").on("click", function () {\n\n      $(this).parents(".custom-select-wrapper").find("select").val($(this).data("value"));\n      if ($(this).data("value") !== \'Select\') {\n        $(\'#reason-error\').hide();\n      }\n      if ($(this).data("value") === \'OT\') {\n        $(\'.input-wrapper.other\').show();\n        $(\'.input-wrapper.reason\').css(\'margin-bottom\', \'27px\');\n      } else {\n        $(\'.input-wrapper.other input\').val(\'\');\n        $(\'.input-wrapper.other\').hide();\n        _storageApi2.default.initLocalStorage().remove(\'data.registration.other\');\n        $(\'.input-wrapper.reason\').css(\'margin-bottom\', \'38px\');\n      }\n      _storageApi2.default.setRegistration({ reason: $(this).data("value") });\n      $(this).parents(".custom-options").find(".custom-option").removeClass("selection");\n      $(this).addClass("selection");\n      $(this).parents(".custom-select-reason").removeClass("opened");\n      $(this).parents(".custom-select-reason").find(".custom-select-trigger").text($(this).text());\n    });\n  },\n  customSelectAction: function customSelectAction(element) {\n\n    $(element).each(function () {\n      var classes = $(this).attr(\'class\');\n      var id = $(this).attr(\'id\');\n      var name = $(this).attr(\'name\');\n      var template = \'<div class="\' + classes + \'">\';\n      template += \'<span class="custom-select-trigger-action">\' + $(this).attr("placeholder") + \'</span>\';\n      template += \'<div class="custom-options-action">\';\n      $(this).find("option").each(function () {\n        template += \'<span class="custom-option-action" data-value="\' + $(this).attr("value") + \'">\' + $(this).html() + \'</span>\';\n      });\n\n      template += \'</div>\';\n      template += \'<div id="action-error" class="custom-invalid" style="display: none;">Field is required</div>\';\n      template += \'</div>\';\n\n      $(this).wrap(\'<div class="custom-select-wrapper"></div>\');\n      $(this).after(template);\n    });\n\n    $(".custom-select-trigger-action").on("click", function () {\n      $(\'html\').one(\'click\', function () {\n        $(".custom-select-action").removeClass("opened");\n      });\n      $(this).parents(".custom-select-action").toggleClass("opened");\n      event.stopPropagation();\n    });\n    $(".custom-option-action").on("click", function () {\n\n      $(this).parents(".custom-select-wrapper").find("select").val($(this).data("value"));\n      if ($(this).data("value") !== \'Please select an action\') {\n        $(\'#action-error\').hide();\n        $(\'.input-wrapper.return\').show();\n      }\n      if ($(this).data("value") === \'Exchange\' || $(this).data("value") === \'Other\') {\n        $(\'.input-wrapper.replacement\').show();\n      } else {\n        $(\'.input-wrapper.replacement input\').val(\'\');\n        $(\'.input-wrapper.replacement\').hide();\n        _storageApi2.default.initLocalStorage2().remove(\'data.return.replacement\');\n      }\n      _storageApi2.default.setReturn({ action: $(this).data("value") });\n      $(this).parents(".custom-options-action").find(".custom-option-action").removeClass("selection");\n      $(this).addClass("selection");\n      $(this).parents(".custom-select-action").removeClass("opened");\n      $(this).parents(".custom-select-action").find(".custom-select-trigger-action").text($(this).text());\n    });\n  },\n  customSelectReturn: function customSelectReturn(element) {\n\n    $(element).each(function () {\n      var classes = $(this).attr(\'class\');\n      var id = $(this).attr(\'id\');\n      var name = $(this).attr(\'name\');\n      var template = \'<div class="\' + classes + \'">\';\n      template += \'<span class="custom-select-trigger-return">\' + $(this).attr("placeholder") + \'</span>\';\n      template += \'<div class="custom-options-return">\';\n      $(this).find("option").each(function () {\n        template += \'<span class="custom-option-return" data-value="\' + $(this).attr("value") + \'">\' + $(this).html() + \'</span>\';\n      });\n\n      template += \'</div>\';\n      template += \'<div id="return-error" class="custom-invalid" style="display: none;">Field is required</div>\';\n      template += \'</div>\';\n\n      $(this).wrap(\'<div class="custom-select-wrapper-return"></div>\');\n      $(this).after(template);\n    });\n\n    $(".custom-select-trigger-return").on("click", function () {\n      $(\'html\').one(\'click\', function () {\n        $(".custom-select-return").removeClass("opened");\n      });\n      $(this).parents(".custom-select-return").toggleClass("opened");\n      event.stopPropagation();\n    });\n    $(".custom-option-return").on("click", function () {\n\n      $(this).parents(".custom-select-wrapper-return").find("select").val($(this).data("value"));\n      if ($(this).data("value") !== \'Please select return reason\') {\n        $(\'#return-error\').hide();\n      }\n\n      _storageApi2.default.setReturn({ return: $(this).data("value") });\n      $(this).parents(".custom-options-return").find(".custom-option-return").removeClass("selection");\n      $(this).addClass("selection");\n      $(this).parents(".custom-select-return").removeClass("opened");\n      $(this).parents(".custom-select-return").find(".custom-select-trigger-return").text($(this).text());\n    });\n  }\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = {\n  size: {\n    'screen-xxs': false,\n    'screen-xs': false,\n    'screen-sm': false,\n    'screen-md': false,\n    'screen-lg': false,\n    'screen-elg': false,\n    current: false\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9uZXd0aGVtZS9qcy9mdW5jdGlvbnMvc2l6ZS5qcz8xNTk3Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzaXplIiwiY3VycmVudCJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQjtBQUNmQyxRQUFNO0FBQ0osa0JBQWMsS0FEVjtBQUVKLGlCQUFhLEtBRlQ7QUFHSixpQkFBYSxLQUhUO0FBSUosaUJBQWEsS0FKVDtBQUtKLGlCQUFhLEtBTFQ7QUFNSixrQkFBYyxLQU5WO0FBT0pDLGFBQVM7QUFQTDtBQURTLENBQWpCIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcclxuICBzaXplOiB7XHJcbiAgICAnc2NyZWVuLXh4cyc6IGZhbHNlLFxyXG4gICAgJ3NjcmVlbi14cyc6IGZhbHNlLFxyXG4gICAgJ3NjcmVlbi1zbSc6IGZhbHNlLFxyXG4gICAgJ3NjcmVlbi1tZCc6IGZhbHNlLFxyXG4gICAgJ3NjcmVlbi1sZyc6IGZhbHNlLFxyXG4gICAgJ3NjcmVlbi1lbGcnOiBmYWxzZSxcclxuICAgIGN1cnJlbnQ6IGZhbHNlXHJcbiAgfVxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9uZXd0aGVtZS9qcy9mdW5jdGlvbnMvc2l6ZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * jQuery Validation Plugin v1.19.1\r\n *\r\n * https://jqueryvalidation.org/\r\n *\r\n * Copyright (c) 2019 Jörn Zaefferer\r\n * Released under the MIT license\r\n */\r\n(function( factory ) {\r\n\tif ( true ) {\r\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t} else if (typeof module === "object" && module.exports) {\r\n\t\tmodule.exports = factory( require( "jquery" ) );\r\n\t} else {\r\n\t\tfactory( jQuery );\r\n\t}\r\n}(function( $ ) {\r\n\r\n$.extend( $.fn, {\n\n\t// https://jqueryvalidation.org/validate/\n\tvalidate: function( options ) {\n\n\t\t// If nothing is selected, return nothing; can\'t chain anyway\n\t\tif ( !this.length ) {\n\t\t\tif ( options && options.debug && window.console ) {\n\t\t\t\tconsole.warn( "Nothing selected, can\'t validate, returning nothing." );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if a validator for this form was already created\n\t\tvar validator = $.data( this[ 0 ], "validator" );\n\t\tif ( validator ) {\n\t\t\treturn validator;\n\t\t}\n\n\t\t// Add novalidate tag if HTML5.\n\t\tthis.attr( "novalidate", "novalidate" );\n\n\t\tvalidator = new $.validator( options, this[ 0 ] );\n\t\t$.data( this[ 0 ], "validator", validator );\n\n\t\tif ( validator.settings.onsubmit ) {\n\n\t\t\tthis.on( "click.validate", ":submit", function( event ) {\n\n\t\t\t\t// Track the used submit button to properly handle scripted\n\t\t\t\t// submits later.\n\t\t\t\tvalidator.submitButton = event.currentTarget;\n\n\t\t\t\t// Allow suppressing validation by adding a cancel class to the submit button\n\t\t\t\tif ( $( this ).hasClass( "cancel" ) ) {\n\t\t\t\t\tvalidator.cancelSubmit = true;\n\t\t\t\t}\n\n\t\t\t\t// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button\n\t\t\t\tif ( $( this ).attr( "formnovalidate" ) !== undefined ) {\n\t\t\t\t\tvalidator.cancelSubmit = true;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Validate the form on submit\n\t\t\tthis.on( "submit.validate", function( event ) {\n\t\t\t\tif ( validator.settings.debug ) {\n\n\t\t\t\t\t// Prevent form submit to be able to see console output\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tfunction handle() {\n\t\t\t\t\tvar hidden, result;\n\n\t\t\t\t\t// Insert a hidden input as a replacement for the missing submit button\n\t\t\t\t\t// The hidden input is inserted in two cases:\n\t\t\t\t\t//   - A user defined a `submitHandler`\n\t\t\t\t\t//   - There was a pending request due to `remote` method and `stopRequest()`\n\t\t\t\t\t//     was called to submit the form in case it\'s valid\n\t\t\t\t\tif ( validator.submitButton && ( validator.settings.submitHandler || validator.formSubmitted ) ) {\n\t\t\t\t\t\thidden = $( "<input type=\'hidden\'/>" )\n\t\t\t\t\t\t\t.attr( "name", validator.submitButton.name )\n\t\t\t\t\t\t\t.val( $( validator.submitButton ).val() )\n\t\t\t\t\t\t\t.appendTo( validator.currentForm );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( validator.settings.submitHandler && !validator.settings.debug ) {\n\t\t\t\t\t\tresult = validator.settings.submitHandler.call( validator, validator.currentForm, event );\n\t\t\t\t\t\tif ( hidden ) {\n\n\t\t\t\t\t\t\t// And clean up afterwards; thanks to no-block-scope, hidden can be referenced\n\t\t\t\t\t\t\thidden.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( result !== undefined ) {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Prevent submit for invalid forms or custom submit handlers\n\t\t\t\tif ( validator.cancelSubmit ) {\n\t\t\t\t\tvalidator.cancelSubmit = false;\n\t\t\t\t\treturn handle();\n\t\t\t\t}\n\t\t\t\tif ( validator.form() ) {\n\t\t\t\t\tif ( validator.pendingRequest ) {\n\t\t\t\t\t\tvalidator.formSubmitted = true;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn handle();\n\t\t\t\t} else {\n\t\t\t\t\tvalidator.focusInvalid();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn validator;\n\t},\n\n\t// https://jqueryvalidation.org/valid/\n\tvalid: function() {\n\t\tvar valid, validator, errorList;\n\n\t\tif ( $( this[ 0 ] ).is( "form" ) ) {\n\t\t\tvalid = this.validate().form();\n\t\t} else {\n\t\t\terrorList = [];\n\t\t\tvalid = true;\n\t\t\tvalidator = $( this[ 0 ].form ).validate();\n\t\t\tthis.each( function() {\n\t\t\t\tvalid = validator.element( this ) && valid;\n\t\t\t\tif ( !valid ) {\n\t\t\t\t\terrorList = errorList.concat( validator.errorList );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tvalidator.errorList = errorList;\n\t\t}\n\t\treturn valid;\n\t},\n\n\t// https://jqueryvalidation.org/rules/\n\trules: function( command, argument ) {\n\t\tvar element = this[ 0 ],\n\t\t\tisContentEditable = typeof this.attr( "contenteditable" ) !== "undefined" && this.attr( "contenteditable" ) !== "false",\n\t\t\tsettings, staticRules, existingRules, data, param, filtered;\n\n\t\t// If nothing is selected, return empty object; can\'t chain anyway\n\t\tif ( element == null ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !element.form && isContentEditable ) {\n\t\t\telement.form = this.closest( "form" )[ 0 ];\n\t\t\telement.name = this.attr( "name" );\n\t\t}\n\n\t\tif ( element.form == null ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( command ) {\n\t\t\tsettings = $.data( element.form, "validator" ).settings;\n\t\t\tstaticRules = settings.rules;\n\t\t\texistingRules = $.validator.staticRules( element );\n\t\t\tswitch ( command ) {\n\t\t\tcase "add":\n\t\t\t\t$.extend( existingRules, $.validator.normalizeRule( argument ) );\n\n\t\t\t\t// Remove messages from rules, but allow them to be set separately\n\t\t\t\tdelete existingRules.messages;\n\t\t\t\tstaticRules[ element.name ] = existingRules;\n\t\t\t\tif ( argument.messages ) {\n\t\t\t\t\tsettings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase "remove":\n\t\t\t\tif ( !argument ) {\n\t\t\t\t\tdelete staticRules[ element.name ];\n\t\t\t\t\treturn existingRules;\n\t\t\t\t}\n\t\t\t\tfiltered = {};\n\t\t\t\t$.each( argument.split( /\\s/ ), function( index, method ) {\n\t\t\t\t\tfiltered[ method ] = existingRules[ method ];\n\t\t\t\t\tdelete existingRules[ method ];\n\t\t\t\t} );\n\t\t\t\treturn filtered;\n\t\t\t}\n\t\t}\n\n\t\tdata = $.validator.normalizeRules(\n\t\t$.extend(\n\t\t\t{},\n\t\t\t$.validator.classRules( element ),\n\t\t\t$.validator.attributeRules( element ),\n\t\t\t$.validator.dataRules( element ),\n\t\t\t$.validator.staticRules( element )\n\t\t), element );\n\n\t\t// Make sure required is at front\n\t\tif ( data.required ) {\n\t\t\tparam = data.required;\n\t\t\tdelete data.required;\n\t\t\tdata = $.extend( { required: param }, data );\n\t\t}\n\n\t\t// Make sure remote is at back\n\t\tif ( data.remote ) {\n\t\t\tparam = data.remote;\n\t\t\tdelete data.remote;\n\t\t\tdata = $.extend( data, { remote: param } );\n\t\t}\n\n\t\treturn data;\n\t}\n} );\n\n// Custom selectors\n$.extend( $.expr.pseudos || $.expr[ ":" ], {\t\t// \'|| $.expr[ ":" ]\' here enables backwards compatibility to jQuery 1.7. Can be removed when dropping jQ 1.7.x support\n\n\t// https://jqueryvalidation.org/blank-selector/\n\tblank: function( a ) {\n\t\treturn !$.trim( "" + $( a ).val() );\n\t},\n\n\t// https://jqueryvalidation.org/filled-selector/\n\tfilled: function( a ) {\n\t\tvar val = $( a ).val();\n\t\treturn val !== null && !!$.trim( "" + val );\n\t},\n\n\t// https://jqueryvalidation.org/unchecked-selector/\n\tunchecked: function( a ) {\n\t\treturn !$( a ).prop( "checked" );\n\t}\n} );\n\n// Constructor for validator\n$.validator = function( options, form ) {\n\tthis.settings = $.extend( true, {}, $.validator.defaults, options );\n\tthis.currentForm = form;\n\tthis.init();\n};\n\n// https://jqueryvalidation.org/jQuery.validator.format/\n$.validator.format = function( source, params ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn function() {\n\t\t\tvar args = $.makeArray( arguments );\n\t\t\targs.unshift( source );\n\t\t\treturn $.validator.format.apply( this, args );\n\t\t};\n\t}\n\tif ( params === undefined ) {\n\t\treturn source;\n\t}\n\tif ( arguments.length > 2 && params.constructor !== Array  ) {\n\t\tparams = $.makeArray( arguments ).slice( 1 );\n\t}\n\tif ( params.constructor !== Array ) {\n\t\tparams = [ params ];\n\t}\n\t$.each( params, function( i, n ) {\n\t\tsource = source.replace( new RegExp( "\\\\{" + i + "\\\\}", "g" ), function() {\n\t\t\treturn n;\n\t\t} );\n\t} );\n\treturn source;\n};\n\n$.extend( $.validator, {\n\n\tdefaults: {\n\t\tmessages: {},\n\t\tgroups: {},\n\t\trules: {},\n\t\terrorClass: "error",\n\t\tpendingClass: "pending",\n\t\tvalidClass: "valid",\n\t\terrorElement: "label",\n\t\tfocusCleanup: false,\n\t\tfocusInvalid: true,\n\t\terrorContainer: $( [] ),\n\t\terrorLabelContainer: $( [] ),\n\t\tonsubmit: true,\n\t\tignore: ":hidden",\n\t\tignoreTitle: false,\n\t\tonfocusin: function( element ) {\n\t\t\tthis.lastActive = element;\n\n\t\t\t// Hide error label and remove error class on focus if enabled\n\t\t\tif ( this.settings.focusCleanup ) {\n\t\t\t\tif ( this.settings.unhighlight ) {\n\t\t\t\t\tthis.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );\n\t\t\t\t}\n\t\t\t\tthis.hideThese( this.errorsFor( element ) );\n\t\t\t}\n\t\t},\n\t\tonfocusout: function( element ) {\n\t\t\tif ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {\n\t\t\t\tthis.element( element );\n\t\t\t}\n\t\t},\n\t\tonkeyup: function( element, event ) {\n\n\t\t\t// Avoid revalidate the field when pressing one of the following keys\n\t\t\t// Shift       => 16\n\t\t\t// Ctrl        => 17\n\t\t\t// Alt         => 18\n\t\t\t// Caps lock   => 20\n\t\t\t// End         => 35\n\t\t\t// Home        => 36\n\t\t\t// Left arrow  => 37\n\t\t\t// Up arrow    => 38\n\t\t\t// Right arrow => 39\n\t\t\t// Down arrow  => 40\n\t\t\t// Insert      => 45\n\t\t\t// Num lock    => 144\n\t\t\t// AltGr key   => 225\n\t\t\tvar excludedKeys = [\n\t\t\t\t16, 17, 18, 20, 35, 36, 37,\n\t\t\t\t38, 39, 40, 45, 144, 225\n\t\t\t];\n\n\t\t\tif ( event.which === 9 && this.elementValue( element ) === "" || $.inArray( event.keyCode, excludedKeys ) !== -1 ) {\n\t\t\t\treturn;\n\t\t\t} else if ( element.name in this.submitted || element.name in this.invalid ) {\n\t\t\t\tthis.element( element );\n\t\t\t}\n\t\t},\n\t\tonclick: function( element ) {\n\n\t\t\t// Click on selects, radiobuttons and checkboxes\n\t\t\tif ( element.name in this.submitted ) {\n\t\t\t\tthis.element( element );\n\n\t\t\t// Or option elements, check parent select in that case\n\t\t\t} else if ( element.parentNode.name in this.submitted ) {\n\t\t\t\tthis.element( element.parentNode );\n\t\t\t}\n\t\t},\n\t\thighlight: function( element, errorClass, validClass ) {\n\t\t\tif ( element.type === "radio" ) {\n\t\t\t\tthis.findByName( element.name ).addClass( errorClass ).removeClass( validClass );\n\t\t\t} else {\n\t\t\t\t$( element ).addClass( errorClass ).removeClass( validClass );\n\t\t\t}\n\t\t},\n\t\tunhighlight: function( element, errorClass, validClass ) {\n\t\t\tif ( element.type === "radio" ) {\n\t\t\t\tthis.findByName( element.name ).removeClass( errorClass ).addClass( validClass );\n\t\t\t} else {\n\t\t\t\t$( element ).removeClass( errorClass ).addClass( validClass );\n\t\t\t}\n\t\t}\n\t},\n\n\t// https://jqueryvalidation.org/jQuery.validator.setDefaults/\n\tsetDefaults: function( settings ) {\n\t\t$.extend( $.validator.defaults, settings );\n\t},\n\n\tmessages: {\n\t\trequired: "This field is required.",\n\t\tremote: "Please fix this field.",\n\t\temail: "Please enter a valid email address.",\n\t\turl: "Please enter a valid URL.",\n\t\tdate: "Please enter a valid date.",\n\t\tdateISO: "Please enter a valid date (ISO).",\n\t\tnumber: "Please enter a valid number.",\n\t\tdigits: "Please enter only digits.",\n\t\tequalTo: "Please enter the same value again.",\n\t\tmaxlength: $.validator.format( "Please enter no more than {0} characters." ),\n\t\tminlength: $.validator.format( "Please enter at least {0} characters." ),\n\t\trangelength: $.validator.format( "Please enter a value between {0} and {1} characters long." ),\n\t\trange: $.validator.format( "Please enter a value between {0} and {1}." ),\n\t\tmax: $.validator.format( "Please enter a value less than or equal to {0}." ),\n\t\tmin: $.validator.format( "Please enter a value greater than or equal to {0}." ),\n\t\tstep: $.validator.format( "Please enter a multiple of {0}." )\n\t},\n\n\tautoCreateRanges: false,\n\n\tprototype: {\n\n\t\tinit: function() {\n\t\t\tthis.labelContainer = $( this.settings.errorLabelContainer );\n\t\t\tthis.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );\n\t\t\tthis.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );\n\t\t\tthis.submitted = {};\n\t\t\tthis.valueCache = {};\n\t\t\tthis.pendingRequest = 0;\n\t\t\tthis.pending = {};\n\t\t\tthis.invalid = {};\n\t\t\tthis.reset();\n\n\t\t\tvar currentForm = this.currentForm,\n\t\t\t\tgroups = ( this.groups = {} ),\n\t\t\t\trules;\n\t\t\t$.each( this.settings.groups, function( key, value ) {\n\t\t\t\tif ( typeof value === "string" ) {\n\t\t\t\t\tvalue = value.split( /\\s/ );\n\t\t\t\t}\n\t\t\t\t$.each( value, function( index, name ) {\n\t\t\t\t\tgroups[ name ] = key;\n\t\t\t\t} );\n\t\t\t} );\n\t\t\trules = this.settings.rules;\n\t\t\t$.each( rules, function( key, value ) {\n\t\t\t\trules[ key ] = $.validator.normalizeRule( value );\n\t\t\t} );\n\n\t\t\tfunction delegate( event ) {\n\t\t\t\tvar isContentEditable = typeof $( this ).attr( "contenteditable" ) !== "undefined" && $( this ).attr( "contenteditable" ) !== "false";\n\n\t\t\t\t// Set form expando on contenteditable\n\t\t\t\tif ( !this.form && isContentEditable ) {\n\t\t\t\t\tthis.form = $( this ).closest( "form" )[ 0 ];\n\t\t\t\t\tthis.name = $( this ).attr( "name" );\n\t\t\t\t}\n\n\t\t\t\t// Ignore the element if it belongs to another form. This will happen mainly\n\t\t\t\t// when setting the `form` attribute of an input to the id of another form.\n\t\t\t\tif ( currentForm !== this.form ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar validator = $.data( this.form, "validator" ),\n\t\t\t\t\teventType = "on" + event.type.replace( /^validate/, "" ),\n\t\t\t\t\tsettings = validator.settings;\n\t\t\t\tif ( settings[ eventType ] && !$( this ).is( settings.ignore ) ) {\n\t\t\t\t\tsettings[ eventType ].call( validator, this, event );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$( this.currentForm )\n\t\t\t\t.on( "focusin.validate focusout.validate keyup.validate",\n\t\t\t\t\t":text, [type=\'password\'], [type=\'file\'], select, textarea, [type=\'number\'], [type=\'search\'], " +\n\t\t\t\t\t"[type=\'tel\'], [type=\'url\'], [type=\'email\'], [type=\'datetime\'], [type=\'date\'], [type=\'month\'], " +\n\t\t\t\t\t"[type=\'week\'], [type=\'time\'], [type=\'datetime-local\'], [type=\'range\'], [type=\'color\'], " +\n\t\t\t\t\t"[type=\'radio\'], [type=\'checkbox\'], [contenteditable], [type=\'button\']", delegate )\n\n\t\t\t\t// Support: Chrome, oldIE\n\t\t\t\t// "select" is provided as event.target when clicking a option\n\t\t\t\t.on( "click.validate", "select, option, [type=\'radio\'], [type=\'checkbox\']", delegate );\n\n\t\t\tif ( this.settings.invalidHandler ) {\n\t\t\t\t$( this.currentForm ).on( "invalid-form.validate", this.settings.invalidHandler );\n\t\t\t}\n\t\t},\n\n\t\t// https://jqueryvalidation.org/Validator.form/\n\t\tform: function() {\n\t\t\tthis.checkForm();\n\t\t\t$.extend( this.submitted, this.errorMap );\n\t\t\tthis.invalid = $.extend( {}, this.errorMap );\n\t\t\tif ( !this.valid() ) {\n\t\t\t\t$( this.currentForm ).triggerHandler( "invalid-form", [ this ] );\n\t\t\t}\n\t\t\tthis.showErrors();\n\t\t\treturn this.valid();\n\t\t},\n\n\t\tcheckForm: function() {\n\t\t\tthis.prepareForm();\n\t\t\tfor ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {\n\t\t\t\tthis.check( elements[ i ] );\n\t\t\t}\n\t\t\treturn this.valid();\n\t\t},\n\n\t\t// https://jqueryvalidation.org/Validator.element/\n\t\telement: function( element ) {\n\t\t\tvar cleanElement = this.clean( element ),\n\t\t\t\tcheckElement = this.validationTargetFor( cleanElement ),\n\t\t\t\tv = this,\n\t\t\t\tresult = true,\n\t\t\t\trs, group;\n\n\t\t\tif ( checkElement === undefined ) {\n\t\t\t\tdelete this.invalid[ cleanElement.name ];\n\t\t\t} else {\n\t\t\t\tthis.prepareElement( checkElement );\n\t\t\t\tthis.currentElements = $( checkElement );\n\n\t\t\t\t// If this element is grouped, then validate all group elements already\n\t\t\t\t// containing a value\n\t\t\t\tgroup = this.groups[ checkElement.name ];\n\t\t\t\tif ( group ) {\n\t\t\t\t\t$.each( this.groups, function( name, testgroup ) {\n\t\t\t\t\t\tif ( testgroup === group && name !== checkElement.name ) {\n\t\t\t\t\t\t\tcleanElement = v.validationTargetFor( v.clean( v.findByName( name ) ) );\n\t\t\t\t\t\t\tif ( cleanElement && cleanElement.name in v.invalid ) {\n\t\t\t\t\t\t\t\tv.currentElements.push( cleanElement );\n\t\t\t\t\t\t\t\tresult = v.check( cleanElement ) && result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\trs = this.check( checkElement ) !== false;\n\t\t\t\tresult = result && rs;\n\t\t\t\tif ( rs ) {\n\t\t\t\t\tthis.invalid[ checkElement.name ] = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.invalid[ checkElement.name ] = true;\n\t\t\t\t}\n\n\t\t\t\tif ( !this.numberOfInvalids() ) {\n\n\t\t\t\t\t// Hide error containers on last error\n\t\t\t\t\tthis.toHide = this.toHide.add( this.containers );\n\t\t\t\t}\n\t\t\t\tthis.showErrors();\n\n\t\t\t\t// Add aria-invalid status for screen readers\n\t\t\t\t$( element ).attr( "aria-invalid", !rs );\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/Validator.showErrors/\n\t\tshowErrors: function( errors ) {\n\t\t\tif ( errors ) {\n\t\t\t\tvar validator = this;\n\n\t\t\t\t// Add items to error list and map\n\t\t\t\t$.extend( this.errorMap, errors );\n\t\t\t\tthis.errorList = $.map( this.errorMap, function( message, name ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\telement: validator.findByName( name )[ 0 ]\n\t\t\t\t\t};\n\t\t\t\t} );\n\n\t\t\t\t// Remove items from success list\n\t\t\t\tthis.successList = $.grep( this.successList, function( element ) {\n\t\t\t\t\treturn !( element.name in errors );\n\t\t\t\t} );\n\t\t\t}\n\t\t\tif ( this.settings.showErrors ) {\n\t\t\t\tthis.settings.showErrors.call( this, this.errorMap, this.errorList );\n\t\t\t} else {\n\t\t\t\tthis.defaultShowErrors();\n\t\t\t}\n\t\t},\n\n\t\t// https://jqueryvalidation.org/Validator.resetForm/\n\t\tresetForm: function() {\n\t\t\tif ( $.fn.resetForm ) {\n\t\t\t\t$( this.currentForm ).resetForm();\n\t\t\t}\n\t\t\tthis.invalid = {};\n\t\t\tthis.submitted = {};\n\t\t\tthis.prepareForm();\n\t\t\tthis.hideErrors();\n\t\t\tvar elements = this.elements()\n\t\t\t\t.removeData( "previousValue" )\n\t\t\t\t.removeAttr( "aria-invalid" );\n\n\t\t\tthis.resetElements( elements );\n\t\t},\n\n\t\tresetElements: function( elements ) {\n\t\t\tvar i;\n\n\t\t\tif ( this.settings.unhighlight ) {\n\t\t\t\tfor ( i = 0; elements[ i ]; i++ ) {\n\t\t\t\t\tthis.settings.unhighlight.call( this, elements[ i ],\n\t\t\t\t\t\tthis.settings.errorClass, "" );\n\t\t\t\t\tthis.findByName( elements[ i ].name ).removeClass( this.settings.validClass );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\telements\n\t\t\t\t\t.removeClass( this.settings.errorClass )\n\t\t\t\t\t.removeClass( this.settings.validClass );\n\t\t\t}\n\t\t},\n\n\t\tnumberOfInvalids: function() {\n\t\t\treturn this.objectLength( this.invalid );\n\t\t},\n\n\t\tobjectLength: function( obj ) {\n\t\t\t/* jshint unused: false */\n\t\t\tvar count = 0,\n\t\t\t\ti;\n\t\t\tfor ( i in obj ) {\n\n\t\t\t\t// This check allows counting elements with empty error\n\t\t\t\t// message as invalid elements\n\t\t\t\tif ( obj[ i ] !== undefined && obj[ i ] !== null && obj[ i ] !== false ) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn count;\n\t\t},\n\n\t\thideErrors: function() {\n\t\t\tthis.hideThese( this.toHide );\n\t\t},\n\n\t\thideThese: function( errors ) {\n\t\t\terrors.not( this.containers ).text( "" );\n\t\t\tthis.addWrapper( errors ).hide();\n\t\t},\n\n\t\tvalid: function() {\n\t\t\treturn this.size() === 0;\n\t\t},\n\n\t\tsize: function() {\n\t\t\treturn this.errorList.length;\n\t\t},\n\n\t\tfocusInvalid: function() {\n\t\t\tif ( this.settings.focusInvalid ) {\n\t\t\t\ttry {\n\t\t\t\t\t$( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [] )\n\t\t\t\t\t.filter( ":visible" )\n\t\t\t\t\t.trigger( "focus" )\n\n\t\t\t\t\t// Manually trigger focusin event; without it, focusin handler isn\'t called, findLastActive won\'t have anything to find\n\t\t\t\t\t.trigger( "focusin" );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// Ignore IE throwing errors when focusing hidden elements\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tfindLastActive: function() {\n\t\t\tvar lastActive = this.lastActive;\n\t\t\treturn lastActive && $.grep( this.errorList, function( n ) {\n\t\t\t\treturn n.element.name === lastActive.name;\n\t\t\t} ).length === 1 && lastActive;\n\t\t},\n\n\t\telements: function() {\n\t\t\tvar validator = this,\n\t\t\t\trulesCache = {};\n\n\t\t\t// Select all valid inputs inside the form (no submit or reset buttons)\n\t\t\treturn $( this.currentForm )\n\t\t\t.find( "input, select, textarea, [contenteditable]" )\n\t\t\t.not( ":submit, :reset, :image, :disabled" )\n\t\t\t.not( this.settings.ignore )\n\t\t\t.filter( function() {\n\t\t\t\tvar name = this.name || $( this ).attr( "name" ); // For contenteditable\n\t\t\t\tvar isContentEditable = typeof $( this ).attr( "contenteditable" ) !== "undefined" && $( this ).attr( "contenteditable" ) !== "false";\n\n\t\t\t\tif ( !name && validator.settings.debug && window.console ) {\n\t\t\t\t\tconsole.error( "%o has no name assigned", this );\n\t\t\t\t}\n\n\t\t\t\t// Set form expando on contenteditable\n\t\t\t\tif ( isContentEditable ) {\n\t\t\t\t\tthis.form = $( this ).closest( "form" )[ 0 ];\n\t\t\t\t\tthis.name = name;\n\t\t\t\t}\n\n\t\t\t\t// Ignore elements that belong to other/nested forms\n\t\t\t\tif ( this.form !== validator.currentForm ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Select only the first element for each name, and only those with rules specified\n\t\t\t\tif ( name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\trulesCache[ name ] = true;\n\t\t\t\treturn true;\n\t\t\t} );\n\t\t},\n\n\t\tclean: function( selector ) {\n\t\t\treturn $( selector )[ 0 ];\n\t\t},\n\n\t\terrors: function() {\n\t\t\tvar errorClass = this.settings.errorClass.split( " " ).join( "." );\n\t\t\treturn $( this.settings.errorElement + "." + errorClass, this.errorContext );\n\t\t},\n\n\t\tresetInternals: function() {\n\t\t\tthis.successList = [];\n\t\t\tthis.errorList = [];\n\t\t\tthis.errorMap = {};\n\t\t\tthis.toShow = $( [] );\n\t\t\tthis.toHide = $( [] );\n\t\t},\n\n\t\treset: function() {\n\t\t\tthis.resetInternals();\n\t\t\tthis.currentElements = $( [] );\n\t\t},\n\n\t\tprepareForm: function() {\n\t\t\tthis.reset();\n\t\t\tthis.toHide = this.errors().add( this.containers );\n\t\t},\n\n\t\tprepareElement: function( element ) {\n\t\t\tthis.reset();\n\t\t\tthis.toHide = this.errorsFor( element );\n\t\t},\n\n\t\telementValue: function( element ) {\n\t\t\tvar $element = $( element ),\n\t\t\t\ttype = element.type,\n\t\t\t\tisContentEditable = typeof $element.attr( "contenteditable" ) !== "undefined" && $element.attr( "contenteditable" ) !== "false",\n\t\t\t\tval, idx;\n\n\t\t\tif ( type === "radio" || type === "checkbox" ) {\n\t\t\t\treturn this.findByName( element.name ).filter( ":checked" ).val();\n\t\t\t} else if ( type === "number" && typeof element.validity !== "undefined" ) {\n\t\t\t\treturn element.validity.badInput ? "NaN" : $element.val();\n\t\t\t}\n\n\t\t\tif ( isContentEditable ) {\n\t\t\t\tval = $element.text();\n\t\t\t} else {\n\t\t\t\tval = $element.val();\n\t\t\t}\n\n\t\t\tif ( type === "file" ) {\n\n\t\t\t\t// Modern browser (chrome & safari)\n\t\t\t\tif ( val.substr( 0, 12 ) === "C:\\\\fakepath\\\\" ) {\n\t\t\t\t\treturn val.substr( 12 );\n\t\t\t\t}\n\n\t\t\t\t// Legacy browsers\n\t\t\t\t// Unix-based path\n\t\t\t\tidx = val.lastIndexOf( "/" );\n\t\t\t\tif ( idx >= 0 ) {\n\t\t\t\t\treturn val.substr( idx + 1 );\n\t\t\t\t}\n\n\t\t\t\t// Windows-based path\n\t\t\t\tidx = val.lastIndexOf( "\\\\" );\n\t\t\t\tif ( idx >= 0 ) {\n\t\t\t\t\treturn val.substr( idx + 1 );\n\t\t\t\t}\n\n\t\t\t\t// Just the file name\n\t\t\t\treturn val;\n\t\t\t}\n\n\t\t\tif ( typeof val === "string" ) {\n\t\t\t\treturn val.replace( /\\r/g, "" );\n\t\t\t}\n\t\t\treturn val;\n\t\t},\n\n\t\tcheck: function( element ) {\n\t\t\telement = this.validationTargetFor( this.clean( element ) );\n\n\t\t\tvar rules = $( element ).rules(),\n\t\t\t\trulesCount = $.map( rules, function( n, i ) {\n\t\t\t\t\treturn i;\n\t\t\t\t} ).length,\n\t\t\t\tdependencyMismatch = false,\n\t\t\t\tval = this.elementValue( element ),\n\t\t\t\tresult, method, rule, normalizer;\n\n\t\t\t// Prioritize the local normalizer defined for this element over the global one\n\t\t\t// if the former exists, otherwise user the global one in case it exists.\n\t\t\tif ( typeof rules.normalizer === "function" ) {\n\t\t\t\tnormalizer = rules.normalizer;\n\t\t\t} else if (\ttypeof this.settings.normalizer === "function" ) {\n\t\t\t\tnormalizer = this.settings.normalizer;\n\t\t\t}\n\n\t\t\t// If normalizer is defined, then call it to retreive the changed value instead\n\t\t\t// of using the real one.\n\t\t\t// Note that `this` in the normalizer is `element`.\n\t\t\tif ( normalizer ) {\n\t\t\t\tval = normalizer.call( element, val );\n\n\t\t\t\t// Delete the normalizer from rules to avoid treating it as a pre-defined method.\n\t\t\t\tdelete rules.normalizer;\n\t\t\t}\n\n\t\t\tfor ( method in rules ) {\n\t\t\t\trule = { method: method, parameters: rules[ method ] };\n\t\t\t\ttry {\n\t\t\t\t\tresult = $.validator.methods[ method ].call( this, val, element, rule.parameters );\n\n\t\t\t\t\t// If a method indicates that the field is optional and therefore valid,\n\t\t\t\t\t// don\'t mark it as valid when there are no other rules\n\t\t\t\t\tif ( result === "dependency-mismatch" && rulesCount === 1 ) {\n\t\t\t\t\t\tdependencyMismatch = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tdependencyMismatch = false;\n\n\t\t\t\t\tif ( result === "pending" ) {\n\t\t\t\t\t\tthis.toHide = this.toHide.not( this.errorsFor( element ) );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !result ) {\n\t\t\t\t\t\tthis.formatAndAdd( element, rule );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tif ( this.settings.debug && window.console ) {\n\t\t\t\t\t\tconsole.log( "Exception occurred when checking element " + element.id + ", check the \'" + rule.method + "\' method.", e );\n\t\t\t\t\t}\n\t\t\t\t\tif ( e instanceof TypeError ) {\n\t\t\t\t\t\te.message += ".  Exception occurred when checking element " + element.id + ", check the \'" + rule.method + "\' method.";\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( dependencyMismatch ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( this.objectLength( rules ) ) {\n\t\t\t\tthis.successList.push( element );\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t// Return the custom message for the given element and validation method\n\t\t// specified in the element\'s HTML5 data attribute\n\t\t// return the generic message if present and no method specific message is present\n\t\tcustomDataMessage: function( element, method ) {\n\t\t\treturn $( element ).data( "msg" + method.charAt( 0 ).toUpperCase() +\n\t\t\t\tmethod.substring( 1 ).toLowerCase() ) || $( element ).data( "msg" );\n\t\t},\n\n\t\t// Return the custom message for the given element name and validation method\n\t\tcustomMessage: function( name, method ) {\n\t\t\tvar m = this.settings.messages[ name ];\n\t\t\treturn m && ( m.constructor === String ? m : m[ method ] );\n\t\t},\n\n\t\t// Return the first defined argument, allowing empty strings\n\t\tfindDefined: function() {\n\t\t\tfor ( var i = 0; i < arguments.length; i++ ) {\n\t\t\t\tif ( arguments[ i ] !== undefined ) {\n\t\t\t\t\treturn arguments[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\n\t\t// The second parameter \'rule\' used to be a string, and extended to an object literal\n\t\t// of the following form:\n\t\t// rule = {\n\t\t//     method: "method name",\n\t\t//     parameters: "the given method parameters"\n\t\t// }\n\t\t//\n\t\t// The old behavior still supported, kept to maintain backward compatibility with\n\t\t// old code, and will be removed in the next major release.\n\t\tdefaultMessage: function( element, rule ) {\n\t\t\tif ( typeof rule === "string" ) {\n\t\t\t\trule = { method: rule };\n\t\t\t}\n\n\t\t\tvar message = this.findDefined(\n\t\t\t\t\tthis.customMessage( element.name, rule.method ),\n\t\t\t\t\tthis.customDataMessage( element, rule.method ),\n\n\t\t\t\t\t// \'title\' is never undefined, so handle empty string as undefined\n\t\t\t\t\t!this.settings.ignoreTitle && element.title || undefined,\n\t\t\t\t\t$.validator.messages[ rule.method ],\n\t\t\t\t\t"<strong>Warning: No message defined for " + element.name + "</strong>"\n\t\t\t\t),\n\t\t\t\ttheregex = /\\$?\\{(\\d+)\\}/g;\n\t\t\tif ( typeof message === "function" ) {\n\t\t\t\tmessage = message.call( this, rule.parameters, element );\n\t\t\t} else if ( theregex.test( message ) ) {\n\t\t\t\tmessage = $.validator.format( message.replace( theregex, "{$1}" ), rule.parameters );\n\t\t\t}\n\n\t\t\treturn message;\n\t\t},\n\n\t\tformatAndAdd: function( element, rule ) {\n\t\t\tvar message = this.defaultMessage( element, rule );\n\n\t\t\tthis.errorList.push( {\n\t\t\t\tmessage: message,\n\t\t\t\telement: element,\n\t\t\t\tmethod: rule.method\n\t\t\t} );\n\n\t\t\tthis.errorMap[ element.name ] = message;\n\t\t\tthis.submitted[ element.name ] = message;\n\t\t},\n\n\t\taddWrapper: function( toToggle ) {\n\t\t\tif ( this.settings.wrapper ) {\n\t\t\t\ttoToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );\n\t\t\t}\n\t\t\treturn toToggle;\n\t\t},\n\n\t\tdefaultShowErrors: function() {\n\t\t\tvar i, elements, error;\n\t\t\tfor ( i = 0; this.errorList[ i ]; i++ ) {\n\t\t\t\terror = this.errorList[ i ];\n\t\t\t\tif ( this.settings.highlight ) {\n\t\t\t\t\tthis.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );\n\t\t\t\t}\n\t\t\t\tthis.showLabel( error.element, error.message );\n\t\t\t}\n\t\t\tif ( this.errorList.length ) {\n\t\t\t\tthis.toShow = this.toShow.add( this.containers );\n\t\t\t}\n\t\t\tif ( this.settings.success ) {\n\t\t\t\tfor ( i = 0; this.successList[ i ]; i++ ) {\n\t\t\t\t\tthis.showLabel( this.successList[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( this.settings.unhighlight ) {\n\t\t\t\tfor ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {\n\t\t\t\t\tthis.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.toHide = this.toHide.not( this.toShow );\n\t\t\tthis.hideErrors();\n\t\t\tthis.addWrapper( this.toShow ).show();\n\t\t},\n\n\t\tvalidElements: function() {\n\t\t\treturn this.currentElements.not( this.invalidElements() );\n\t\t},\n\n\t\tinvalidElements: function() {\n\t\t\treturn $( this.errorList ).map( function() {\n\t\t\t\treturn this.element;\n\t\t\t} );\n\t\t},\n\n\t\tshowLabel: function( element, message ) {\n\t\t\tvar place, group, errorID, v,\n\t\t\t\terror = this.errorsFor( element ),\n\t\t\t\telementID = this.idOrName( element ),\n\t\t\t\tdescribedBy = $( element ).attr( "aria-describedby" );\n\n\t\t\tif ( error.length ) {\n\n\t\t\t\t// Refresh error/success class\n\t\t\t\terror.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );\n\n\t\t\t\t// Replace message on existing label\n\t\t\t\terror.html( message );\n\t\t\t} else {\n\n\t\t\t\t// Create error element\n\t\t\t\terror = $( "<" + this.settings.errorElement + ">" )\n\t\t\t\t\t.attr( "id", elementID + "-error" )\n\t\t\t\t\t.addClass( this.settings.errorClass )\n\t\t\t\t\t.html( message || "" );\n\n\t\t\t\t// Maintain reference to the element to be placed into the DOM\n\t\t\t\tplace = error;\n\t\t\t\tif ( this.settings.wrapper ) {\n\n\t\t\t\t\t// Make sure the element is visible, even in IE\n\t\t\t\t\t// actually showing the wrapped element is handled elsewhere\n\t\t\t\t\tplace = error.hide().show().wrap( "<" + this.settings.wrapper + "/>" ).parent();\n\t\t\t\t}\n\t\t\t\tif ( this.labelContainer.length ) {\n\t\t\t\t\tthis.labelContainer.append( place );\n\t\t\t\t} else if ( this.settings.errorPlacement ) {\n\t\t\t\t\tthis.settings.errorPlacement.call( this, place, $( element ) );\n\t\t\t\t} else {\n\t\t\t\t\tplace.insertAfter( element );\n\t\t\t\t}\n\n\t\t\t\t// Link error back to the element\n\t\t\t\tif ( error.is( "label" ) ) {\n\n\t\t\t\t\t// If the error is a label, then associate using \'for\'\n\t\t\t\t\terror.attr( "for", elementID );\n\n\t\t\t\t\t// If the element is not a child of an associated label, then it\'s necessary\n\t\t\t\t\t// to explicitly apply aria-describedby\n\t\t\t\t} else if ( error.parents( "label[for=\'" + this.escapeCssMeta( elementID ) + "\']" ).length === 0 ) {\n\t\t\t\t\terrorID = error.attr( "id" );\n\n\t\t\t\t\t// Respect existing non-error aria-describedby\n\t\t\t\t\tif ( !describedBy ) {\n\t\t\t\t\t\tdescribedBy = errorID;\n\t\t\t\t\t} else if ( !describedBy.match( new RegExp( "\\\\b" + this.escapeCssMeta( errorID ) + "\\\\b" ) ) ) {\n\n\t\t\t\t\t\t// Add to end of list if not already present\n\t\t\t\t\t\tdescribedBy += " " + errorID;\n\t\t\t\t\t}\n\t\t\t\t\t$( element ).attr( "aria-describedby", describedBy );\n\n\t\t\t\t\t// If this element is grouped, then assign to all elements in the same group\n\t\t\t\t\tgroup = this.groups[ element.name ];\n\t\t\t\t\tif ( group ) {\n\t\t\t\t\t\tv = this;\n\t\t\t\t\t\t$.each( v.groups, function( name, testgroup ) {\n\t\t\t\t\t\t\tif ( testgroup === group ) {\n\t\t\t\t\t\t\t\t$( "[name=\'" + v.escapeCssMeta( name ) + "\']", v.currentForm )\n\t\t\t\t\t\t\t\t\t.attr( "aria-describedby", error.attr( "id" ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( !message && this.settings.success ) {\n\t\t\t\terror.text( "" );\n\t\t\t\tif ( typeof this.settings.success === "string" ) {\n\t\t\t\t\terror.addClass( this.settings.success );\n\t\t\t\t} else {\n\t\t\t\t\tthis.settings.success( error, element );\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.toShow = this.toShow.add( error );\n\t\t},\n\n\t\terrorsFor: function( element ) {\n\t\t\tvar name = this.escapeCssMeta( this.idOrName( element ) ),\n\t\t\t\tdescriber = $( element ).attr( "aria-describedby" ),\n\t\t\t\tselector = "label[for=\'" + name + "\'], label[for=\'" + name + "\'] *";\n\n\t\t\t// \'aria-describedby\' should directly reference the error element\n\t\t\tif ( describer ) {\n\t\t\t\tselector = selector + ", #" + this.escapeCssMeta( describer )\n\t\t\t\t\t.replace( /\\s+/g, ", #" );\n\t\t\t}\n\n\t\t\treturn this\n\t\t\t\t.errors()\n\t\t\t\t.filter( selector );\n\t\t},\n\n\t\t// See https://api.jquery.com/category/selectors/, for CSS\n\t\t// meta-characters that should be escaped in order to be used with JQuery\n\t\t// as a literal part of a name/id or any selector.\n\t\tescapeCssMeta: function( string ) {\n\t\t\treturn string.replace( /([\\\\!"#$%&\'()*+,./:;<=>?@\\[\\]^`{|}~])/g, "\\\\$1" );\n\t\t},\n\n\t\tidOrName: function( element ) {\n\t\t\treturn this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );\n\t\t},\n\n\t\tvalidationTargetFor: function( element ) {\n\n\t\t\t// If radio/checkbox, validate first element in group instead\n\t\t\tif ( this.checkable( element ) ) {\n\t\t\t\telement = this.findByName( element.name );\n\t\t\t}\n\n\t\t\t// Always apply ignore filter\n\t\t\treturn $( element ).not( this.settings.ignore )[ 0 ];\n\t\t},\n\n\t\tcheckable: function( element ) {\n\t\t\treturn ( /radio|checkbox/i ).test( element.type );\n\t\t},\n\n\t\tfindByName: function( name ) {\n\t\t\treturn $( this.currentForm ).find( "[name=\'" + this.escapeCssMeta( name ) + "\']" );\n\t\t},\n\n\t\tgetLength: function( value, element ) {\n\t\t\tswitch ( element.nodeName.toLowerCase() ) {\n\t\t\tcase "select":\n\t\t\t\treturn $( "option:selected", element ).length;\n\t\t\tcase "input":\n\t\t\t\tif ( this.checkable( element ) ) {\n\t\t\t\t\treturn this.findByName( element.name ).filter( ":checked" ).length;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value.length;\n\t\t},\n\n\t\tdepend: function( param, element ) {\n\t\t\treturn this.dependTypes[ typeof param ] ? this.dependTypes[ typeof param ]( param, element ) : true;\n\t\t},\n\n\t\tdependTypes: {\n\t\t\t"boolean": function( param ) {\n\t\t\t\treturn param;\n\t\t\t},\n\t\t\t"string": function( param, element ) {\n\t\t\t\treturn !!$( param, element.form ).length;\n\t\t\t},\n\t\t\t"function": function( param, element ) {\n\t\t\t\treturn param( element );\n\t\t\t}\n\t\t},\n\n\t\toptional: function( element ) {\n\t\t\tvar val = this.elementValue( element );\n\t\t\treturn !$.validator.methods.required.call( this, val, element ) && "dependency-mismatch";\n\t\t},\n\n\t\tstartRequest: function( element ) {\n\t\t\tif ( !this.pending[ element.name ] ) {\n\t\t\t\tthis.pendingRequest++;\n\t\t\t\t$( element ).addClass( this.settings.pendingClass );\n\t\t\t\tthis.pending[ element.name ] = true;\n\t\t\t}\n\t\t},\n\n\t\tstopRequest: function( element, valid ) {\n\t\t\tthis.pendingRequest--;\n\n\t\t\t// Sometimes synchronization fails, make sure pendingRequest is never < 0\n\t\t\tif ( this.pendingRequest < 0 ) {\n\t\t\t\tthis.pendingRequest = 0;\n\t\t\t}\n\t\t\tdelete this.pending[ element.name ];\n\t\t\t$( element ).removeClass( this.settings.pendingClass );\n\t\t\tif ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {\n\t\t\t\t$( this.currentForm ).submit();\n\n\t\t\t\t// Remove the hidden input that was used as a replacement for the\n\t\t\t\t// missing submit button. The hidden input is added by `handle()`\n\t\t\t\t// to ensure that the value of the used submit button is passed on\n\t\t\t\t// for scripted submits triggered by this method\n\t\t\t\tif ( this.submitButton ) {\n\t\t\t\t\t$( "input:hidden[name=\'" + this.submitButton.name + "\']", this.currentForm ).remove();\n\t\t\t\t}\n\n\t\t\t\tthis.formSubmitted = false;\n\t\t\t} else if ( !valid && this.pendingRequest === 0 && this.formSubmitted ) {\n\t\t\t\t$( this.currentForm ).triggerHandler( "invalid-form", [ this ] );\n\t\t\t\tthis.formSubmitted = false;\n\t\t\t}\n\t\t},\n\n\t\tpreviousValue: function( element, method ) {\n\t\t\tmethod = typeof method === "string" && method || "remote";\n\n\t\t\treturn $.data( element, "previousValue" ) || $.data( element, "previousValue", {\n\t\t\t\told: null,\n\t\t\t\tvalid: true,\n\t\t\t\tmessage: this.defaultMessage( element, { method: method } )\n\t\t\t} );\n\t\t},\n\n\t\t// Cleans up all forms and elements, removes validator-specific events\n\t\tdestroy: function() {\n\t\t\tthis.resetForm();\n\n\t\t\t$( this.currentForm )\n\t\t\t\t.off( ".validate" )\n\t\t\t\t.removeData( "validator" )\n\t\t\t\t.find( ".validate-equalTo-blur" )\n\t\t\t\t\t.off( ".validate-equalTo" )\n\t\t\t\t\t.removeClass( "validate-equalTo-blur" )\n\t\t\t\t.find( ".validate-lessThan-blur" )\n\t\t\t\t\t.off( ".validate-lessThan" )\n\t\t\t\t\t.removeClass( "validate-lessThan-blur" )\n\t\t\t\t.find( ".validate-lessThanEqual-blur" )\n\t\t\t\t\t.off( ".validate-lessThanEqual" )\n\t\t\t\t\t.removeClass( "validate-lessThanEqual-blur" )\n\t\t\t\t.find( ".validate-greaterThanEqual-blur" )\n\t\t\t\t\t.off( ".validate-greaterThanEqual" )\n\t\t\t\t\t.removeClass( "validate-greaterThanEqual-blur" )\n\t\t\t\t.find( ".validate-greaterThan-blur" )\n\t\t\t\t\t.off( ".validate-greaterThan" )\n\t\t\t\t\t.removeClass( "validate-greaterThan-blur" );\n\t\t}\n\n\t},\n\n\tclassRuleSettings: {\n\t\trequired: { required: true },\n\t\temail: { email: true },\n\t\turl: { url: true },\n\t\tdate: { date: true },\n\t\tdateISO: { dateISO: true },\n\t\tnumber: { number: true },\n\t\tdigits: { digits: true },\n\t\tcreditcard: { creditcard: true }\n\t},\n\n\taddClassRules: function( className, rules ) {\n\t\tif ( className.constructor === String ) {\n\t\t\tthis.classRuleSettings[ className ] = rules;\n\t\t} else {\n\t\t\t$.extend( this.classRuleSettings, className );\n\t\t}\n\t},\n\n\tclassRules: function( element ) {\n\t\tvar rules = {},\n\t\t\tclasses = $( element ).attr( "class" );\n\n\t\tif ( classes ) {\n\t\t\t$.each( classes.split( " " ), function() {\n\t\t\t\tif ( this in $.validator.classRuleSettings ) {\n\t\t\t\t\t$.extend( rules, $.validator.classRuleSettings[ this ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\treturn rules;\n\t},\n\n\tnormalizeAttributeRule: function( rules, type, method, value ) {\n\n\t\t// Convert the value to a number for number inputs, and for text for backwards compability\n\t\t// allows type="date" and others to be compared as strings\n\t\tif ( /min|max|step/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {\n\t\t\tvalue = Number( value );\n\n\t\t\t// Support Opera Mini, which returns NaN for undefined minlength\n\t\t\tif ( isNaN( value ) ) {\n\t\t\t\tvalue = undefined;\n\t\t\t}\n\t\t}\n\n\t\tif ( value || value === 0 ) {\n\t\t\trules[ method ] = value;\n\t\t} else if ( type === method && type !== "range" ) {\n\n\t\t\t// Exception: the jquery validate \'range\' method\n\t\t\t// does not test for the html5 \'range\' type\n\t\t\trules[ method ] = true;\n\t\t}\n\t},\n\n\tattributeRules: function( element ) {\n\t\tvar rules = {},\n\t\t\t$element = $( element ),\n\t\t\ttype = element.getAttribute( "type" ),\n\t\t\tmethod, value;\n\n\t\tfor ( method in $.validator.methods ) {\n\n\t\t\t// Support for <input required> in both html5 and older browsers\n\t\t\tif ( method === "required" ) {\n\t\t\t\tvalue = element.getAttribute( method );\n\n\t\t\t\t// Some browsers return an empty string for the required attribute\n\t\t\t\t// and non-HTML5 browsers might have required="" markup\n\t\t\t\tif ( value === "" ) {\n\t\t\t\t\tvalue = true;\n\t\t\t\t}\n\n\t\t\t\t// Force non-HTML5 browsers to return bool\n\t\t\t\tvalue = !!value;\n\t\t\t} else {\n\t\t\t\tvalue = $element.attr( method );\n\t\t\t}\n\n\t\t\tthis.normalizeAttributeRule( rules, type, method, value );\n\t\t}\n\n\t\t// \'maxlength\' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs\n\t\tif ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {\n\t\t\tdelete rules.maxlength;\n\t\t}\n\n\t\treturn rules;\n\t},\n\n\tdataRules: function( element ) {\n\t\tvar rules = {},\n\t\t\t$element = $( element ),\n\t\t\ttype = element.getAttribute( "type" ),\n\t\t\tmethod, value;\n\n\t\tfor ( method in $.validator.methods ) {\n\t\t\tvalue = $element.data( "rule" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );\n\n\t\t\t// Cast empty attributes like `data-rule-required` to `true`\n\t\t\tif ( value === "" ) {\n\t\t\t\tvalue = true;\n\t\t\t}\n\n\t\t\tthis.normalizeAttributeRule( rules, type, method, value );\n\t\t}\n\t\treturn rules;\n\t},\n\n\tstaticRules: function( element ) {\n\t\tvar rules = {},\n\t\t\tvalidator = $.data( element.form, "validator" );\n\n\t\tif ( validator.settings.rules ) {\n\t\t\trules = $.validator.normalizeRule( validator.settings.rules[ element.name ] ) || {};\n\t\t}\n\t\treturn rules;\n\t},\n\n\tnormalizeRules: function( rules, element ) {\n\n\t\t// Handle dependency check\n\t\t$.each( rules, function( prop, val ) {\n\n\t\t\t// Ignore rule when param is explicitly false, eg. required:false\n\t\t\tif ( val === false ) {\n\t\t\t\tdelete rules[ prop ];\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( val.param || val.depends ) {\n\t\t\t\tvar keepRule = true;\n\t\t\t\tswitch ( typeof val.depends ) {\n\t\t\t\tcase "string":\n\t\t\t\t\tkeepRule = !!$( val.depends, element.form ).length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase "function":\n\t\t\t\t\tkeepRule = val.depends.call( element, element );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( keepRule ) {\n\t\t\t\t\trules[ prop ] = val.param !== undefined ? val.param : true;\n\t\t\t\t} else {\n\t\t\t\t\t$.data( element.form, "validator" ).resetElements( $( element ) );\n\t\t\t\t\tdelete rules[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Evaluate parameters\n\t\t$.each( rules, function( rule, parameter ) {\n\t\t\trules[ rule ] = $.isFunction( parameter ) && rule !== "normalizer" ? parameter( element ) : parameter;\n\t\t} );\n\n\t\t// Clean number parameters\n\t\t$.each( [ "minlength", "maxlength" ], function() {\n\t\t\tif ( rules[ this ] ) {\n\t\t\t\trules[ this ] = Number( rules[ this ] );\n\t\t\t}\n\t\t} );\n\t\t$.each( [ "rangelength", "range" ], function() {\n\t\t\tvar parts;\n\t\t\tif ( rules[ this ] ) {\n\t\t\t\tif ( $.isArray( rules[ this ] ) ) {\n\t\t\t\t\trules[ this ] = [ Number( rules[ this ][ 0 ] ), Number( rules[ this ][ 1 ] ) ];\n\t\t\t\t} else if ( typeof rules[ this ] === "string" ) {\n\t\t\t\t\tparts = rules[ this ].replace( /[\\[\\]]/g, "" ).split( /[\\s,]+/ );\n\t\t\t\t\trules[ this ] = [ Number( parts[ 0 ] ), Number( parts[ 1 ] ) ];\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tif ( $.validator.autoCreateRanges ) {\n\n\t\t\t// Auto-create ranges\n\t\t\tif ( rules.min != null && rules.max != null ) {\n\t\t\t\trules.range = [ rules.min, rules.max ];\n\t\t\t\tdelete rules.min;\n\t\t\t\tdelete rules.max;\n\t\t\t}\n\t\t\tif ( rules.minlength != null && rules.maxlength != null ) {\n\t\t\t\trules.rangelength = [ rules.minlength, rules.maxlength ];\n\t\t\t\tdelete rules.minlength;\n\t\t\t\tdelete rules.maxlength;\n\t\t\t}\n\t\t}\n\n\t\treturn rules;\n\t},\n\n\t// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}\n\tnormalizeRule: function( data ) {\n\t\tif ( typeof data === "string" ) {\n\t\t\tvar transformed = {};\n\t\t\t$.each( data.split( /\\s/ ), function() {\n\t\t\t\ttransformed[ this ] = true;\n\t\t\t} );\n\t\t\tdata = transformed;\n\t\t}\n\t\treturn data;\n\t},\n\n\t// https://jqueryvalidation.org/jQuery.validator.addMethod/\n\taddMethod: function( name, method, message ) {\n\t\t$.validator.methods[ name ] = method;\n\t\t$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];\n\t\tif ( method.length < 3 ) {\n\t\t\t$.validator.addClassRules( name, $.validator.normalizeRule( name ) );\n\t\t}\n\t},\n\n\t// https://jqueryvalidation.org/jQuery.validator.methods/\n\tmethods: {\n\n\t\t// https://jqueryvalidation.org/required-method/\n\t\trequired: function( value, element, param ) {\n\n\t\t\t// Check if dependency is met\n\t\t\tif ( !this.depend( param, element ) ) {\n\t\t\t\treturn "dependency-mismatch";\n\t\t\t}\n\t\t\tif ( element.nodeName.toLowerCase() === "select" ) {\n\n\t\t\t\t// Could be an array for select-multiple or a string, both are fine this way\n\t\t\t\tvar val = $( element ).val();\n\t\t\t\treturn val && val.length > 0;\n\t\t\t}\n\t\t\tif ( this.checkable( element ) ) {\n\t\t\t\treturn this.getLength( value, element ) > 0;\n\t\t\t}\n\t\t\treturn value !== undefined && value !== null && value.length > 0;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/email-method/\n\t\temail: function( value, element ) {\n\n\t\t\t// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n\t\t\t// Retrieved 2014-01-14\n\t\t\t// If you have a problem with this implementation, report a bug against the above spec\n\t\t\t// Or use custom methods to implement your own email validation\n\t\t\treturn this.optional( element ) || /^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/url-method/\n\t\turl: function( value, element ) {\n\n\t\t\t// Copyright (c) 2010-2013 Diego Perini, MIT licensed\n\t\t\t// https://gist.github.com/dperini/729294\n\t\t\t// see also https://mathiasbynens.be/demo/url-regex\n\t\t\t// modified to allow protocol-relative URLs\n\t\t\treturn this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test( value );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/date-method/\n\t\tdate: ( function() {\n\t\t\tvar called = false;\n\n\t\t\treturn function( value, element ) {\n\t\t\t\tif ( !called ) {\n\t\t\t\t\tcalled = true;\n\t\t\t\t\tif ( this.settings.debug && window.console ) {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t"The `date` method is deprecated and will be removed in version \'2.0.0\'.\\n" +\n\t\t\t\t\t\t\t"Please don\'t use it, since it relies on the Date constructor, which\\n" +\n\t\t\t\t\t\t\t"behaves very differently across browsers and locales. Use `dateISO`\\n" +\n\t\t\t\t\t\t\t"instead or one of the locale specific methods in `localizations/`\\n" +\n\t\t\t\t\t\t\t"and `additional-methods.js`."\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this.optional( element ) || !/Invalid|NaN/.test( new Date( value ).toString() );\n\t\t\t};\n\t\t}() ),\n\n\t\t// https://jqueryvalidation.org/dateISO-method/\n\t\tdateISO: function( value, element ) {\n\t\t\treturn this.optional( element ) || /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test( value );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/number-method/\n\t\tnumber: function( value, element ) {\n\t\t\treturn this.optional( element ) || /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test( value );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/digits-method/\n\t\tdigits: function( value, element ) {\n\t\t\treturn this.optional( element ) || /^\\d+$/.test( value );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/minlength-method/\n\t\tminlength: function( value, element, param ) {\n\t\t\tvar length = $.isArray( value ) ? value.length : this.getLength( value, element );\n\t\t\treturn this.optional( element ) || length >= param;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/maxlength-method/\n\t\tmaxlength: function( value, element, param ) {\n\t\t\tvar length = $.isArray( value ) ? value.length : this.getLength( value, element );\n\t\t\treturn this.optional( element ) || length <= param;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/rangelength-method/\n\t\trangelength: function( value, element, param ) {\n\t\t\tvar length = $.isArray( value ) ? value.length : this.getLength( value, element );\n\t\t\treturn this.optional( element ) || ( length >= param[ 0 ] && length <= param[ 1 ] );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/min-method/\n\t\tmin: function( value, element, param ) {\n\t\t\treturn this.optional( element ) || value >= param;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/max-method/\n\t\tmax: function( value, element, param ) {\n\t\t\treturn this.optional( element ) || value <= param;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/range-method/\n\t\trange: function( value, element, param ) {\n\t\t\treturn this.optional( element ) || ( value >= param[ 0 ] && value <= param[ 1 ] );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/step-method/\n\t\tstep: function( value, element, param ) {\n\t\t\tvar type = $( element ).attr( "type" ),\n\t\t\t\terrorMessage = "Step attribute on input type " + type + " is not supported.",\n\t\t\t\tsupportedTypes = [ "text", "number", "range" ],\n\t\t\t\tre = new RegExp( "\\\\b" + type + "\\\\b" ),\n\t\t\t\tnotSupported = type && !re.test( supportedTypes.join() ),\n\t\t\t\tdecimalPlaces = function( num ) {\n\t\t\t\t\tvar match = ( "" + num ).match( /(?:\\.(\\d+))?$/ );\n\t\t\t\t\tif ( !match ) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Number of digits right of decimal point.\n\t\t\t\t\treturn match[ 1 ] ? match[ 1 ].length : 0;\n\t\t\t\t},\n\t\t\t\ttoInt = function( num ) {\n\t\t\t\t\treturn Math.round( num * Math.pow( 10, decimals ) );\n\t\t\t\t},\n\t\t\t\tvalid = true,\n\t\t\t\tdecimals;\n\n\t\t\t// Works only for text, number and range input types\n\t\t\t// TODO find a way to support input types date, datetime, datetime-local, month, time and week\n\t\t\tif ( notSupported ) {\n\t\t\t\tthrow new Error( errorMessage );\n\t\t\t}\n\n\t\t\tdecimals = decimalPlaces( param );\n\n\t\t\t// Value can\'t have too many decimals\n\t\t\tif ( decimalPlaces( value ) > decimals || toInt( value ) % toInt( param ) !== 0 ) {\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\treturn this.optional( element ) || valid;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/equalTo-method/\n\t\tequalTo: function( value, element, param ) {\n\n\t\t\t// Bind to the blur event of the target in order to revalidate whenever the target field is updated\n\t\t\tvar target = $( param );\n\t\t\tif ( this.settings.onfocusout && target.not( ".validate-equalTo-blur" ).length ) {\n\t\t\t\ttarget.addClass( "validate-equalTo-blur" ).on( "blur.validate-equalTo", function() {\n\t\t\t\t\t$( element ).valid();\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn value === target.val();\n\t\t},\n\n\t\t// https://jqueryvalidation.org/remote-method/\n\t\tremote: function( value, element, param, method ) {\n\t\t\tif ( this.optional( element ) ) {\n\t\t\t\treturn "dependency-mismatch";\n\t\t\t}\n\n\t\t\tmethod = typeof method === "string" && method || "remote";\n\n\t\t\tvar previous = this.previousValue( element, method ),\n\t\t\t\tvalidator, data, optionDataString;\n\n\t\t\tif ( !this.settings.messages[ element.name ] ) {\n\t\t\t\tthis.settings.messages[ element.name ] = {};\n\t\t\t}\n\t\t\tprevious.originalMessage = previous.originalMessage || this.settings.messages[ element.name ][ method ];\n\t\t\tthis.settings.messages[ element.name ][ method ] = previous.message;\n\n\t\t\tparam = typeof param === "string" && { url: param } || param;\n\t\t\toptionDataString = $.param( $.extend( { data: value }, param.data ) );\n\t\t\tif ( previous.old === optionDataString ) {\n\t\t\t\treturn previous.valid;\n\t\t\t}\n\n\t\t\tprevious.old = optionDataString;\n\t\t\tvalidator = this;\n\t\t\tthis.startRequest( element );\n\t\t\tdata = {};\n\t\t\tdata[ element.name ] = value;\n\t\t\t$.ajax( $.extend( true, {\n\t\t\t\tmode: "abort",\n\t\t\t\tport: "validate" + element.name,\n\t\t\t\tdataType: "json",\n\t\t\t\tdata: data,\n\t\t\t\tcontext: validator.currentForm,\n\t\t\t\tsuccess: function( response ) {\n\t\t\t\t\tvar valid = response === true || response === "true",\n\t\t\t\t\t\terrors, message, submitted;\n\n\t\t\t\t\tvalidator.settings.messages[ element.name ][ method ] = previous.originalMessage;\n\t\t\t\t\tif ( valid ) {\n\t\t\t\t\t\tsubmitted = validator.formSubmitted;\n\t\t\t\t\t\tvalidator.resetInternals();\n\t\t\t\t\t\tvalidator.toHide = validator.errorsFor( element );\n\t\t\t\t\t\tvalidator.formSubmitted = submitted;\n\t\t\t\t\t\tvalidator.successList.push( element );\n\t\t\t\t\t\tvalidator.invalid[ element.name ] = false;\n\t\t\t\t\t\tvalidator.showErrors();\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors = {};\n\t\t\t\t\t\tmessage = response || validator.defaultMessage( element, { method: method, parameters: value } );\n\t\t\t\t\t\terrors[ element.name ] = previous.message = message;\n\t\t\t\t\t\tvalidator.invalid[ element.name ] = true;\n\t\t\t\t\t\tvalidator.showErrors( errors );\n\t\t\t\t\t}\n\t\t\t\t\tprevious.valid = valid;\n\t\t\t\t\tvalidator.stopRequest( element, valid );\n\t\t\t\t}\n\t\t\t}, param ) );\n\t\t\treturn "pending";\n\t\t}\n\t}\n\n} );\n\r\n// Ajax mode: abort\n// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});\n// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()\n\nvar pendingRequests = {},\n\tajax;\n\n// Use a prefilter if available (1.5+)\nif ( $.ajaxPrefilter ) {\n\t$.ajaxPrefilter( function( settings, _, xhr ) {\n\t\tvar port = settings.port;\n\t\tif ( settings.mode === "abort" ) {\n\t\t\tif ( pendingRequests[ port ] ) {\n\t\t\t\tpendingRequests[ port ].abort();\n\t\t\t}\n\t\t\tpendingRequests[ port ] = xhr;\n\t\t}\n\t} );\n} else {\n\n\t// Proxy ajax\n\tajax = $.ajax;\n\t$.ajax = function( settings ) {\n\t\tvar mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,\n\t\t\tport = ( "port" in settings ? settings : $.ajaxSettings ).port;\n\t\tif ( mode === "abort" ) {\n\t\t\tif ( pendingRequests[ port ] ) {\n\t\t\t\tpendingRequests[ port ].abort();\n\t\t\t}\n\t\t\tpendingRequests[ port ] = ajax.apply( this, arguments );\n\t\t\treturn pendingRequests[ port ];\n\t\t}\n\t\treturn ajax.apply( this, arguments );\n\t};\n}\nreturn $;\r\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},,function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function($) {\n\nvar _size = __webpack_require__(4);\n\nvar _size2 = _interopRequireDefault(_size);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar sphere = window.sphere || {}; /* eslint-disable */\n/* global WPURLS */\n\n\nsphere.header = {\n  init: function init() {\n    sphere.debug = true;\n    if (sphere.debug) {\n      console.log('sphere.header');\n    }\n    this.primaryMenuToggleOpen();\n    this.scrollToSectionFromHeader();\n    this.scrollToSectionFromFooter();\n\n    this.breakPointCheck();\n\n    history.pushState(null, null, window.location.pathname);\n  },\n  primaryMenuToggleOpen: function primaryMenuToggleOpen() {\n    $(document).on('click', '.btn-menu', function (event) {\n      event.preventDefault();\n      $(this).toggleClass('active');\n      $('nav').toggleClass('expanded');\n    });\n  },\n  scrollToSectionFromHeader: function scrollToSectionFromHeader() {\n    $('.primary').find('a').on('click', function (event) {\n      if ($(this).text().indexOf('PRIVACY') >= 0 || $(this).text().indexOf('REGISTRATION') >= 0 || $(this).text().indexOf('SUPPORT') >= 0) {\n        return;\n      }\n      event.preventDefault();\n      if (window.location.href.indexOf('register') >= 0 || window.location.href.indexOf('return') >= 0) {\n        if ($(this).text().indexOf('ABOUT US') >= 0) {\n          window.location.replace(WPURLS.siteurl + '/#about-us');\n\n          $('html, body').animate({\n            scrollTop: $(window.location.hash).offset().top - 100\n          });\n        }\n        if ($(this).text().indexOf('CONTACT US') >= 0) {\n          window.location.replace(WPURLS.siteurl + '/#contact-us');\n\n          $('html, body').animate({\n            scrollTop: $(window.location.hash).offset().top - 100\n          });\n        }\n      }\n      var section = $(this).attr('href');\n      $('html, body').animate({\n        scrollTop: $(section).offset().top - 100\n      });\n      $('nav').removeClass('expanded');\n      $('.btn-menu').removeClass('active');\n    });\n  },\n  scrollToSectionFromFooter: function scrollToSectionFromFooter() {\n    $('.secondary').find('a').on('click', function (event) {\n      if ($(this).text().indexOf('Privacy') >= 0 || $(this).text().indexOf('Registration') >= 0 || $(this).text().indexOf('Return Policy') >= 0 || $(this).text().indexOf('Support') >= 0) {\n        return;\n      }\n      event.preventDefault();\n\n      var section = $(this).attr('href');\n      $('html, body').animate({\n        scrollTop: $(section).offset().top - 100\n      });\n      $('nav').removeClass('expanded');\n      $('.btn-menu').removeClass('active');\n    });\n  },\n  breakPointCheck: function breakPointCheck() {\n    if (_size2.default.current === this.size) {\n      // no breakpoint change\n      return;\n    }\n    this.size = _size2.default.current;\n    if (sphere.debug) {\n      console.log('sphere.header.breakPointCheck ||', _size2.default.current + ' ||');\n    }\n\n    // if (size.current === 'screen-xxs' || size.current === 'screen-xs' || size.current === 'screen-sm') {\n    //\n    // } else {\n    //\n    // }\n  }\n};\n\n$(document).ready(function () {\n  if ($('header').length) {\n    sphere.header.init();\n  }\n});\n$(window).on('resize', function () {\n  $('nav').removeClass('expanded');\n  $('.btn-menu').removeClass('active');\n  sphere.header.breakPointCheck();\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9uZXd0aGVtZS9qcy9mdW5jdGlvbnMvaGVhZGVyLmpzPzQ5MGMiXSwibmFtZXMiOlsic3BoZXJlIiwid2luZG93IiwiaGVhZGVyIiwiaW5pdCIsImRlYnVnIiwiY29uc29sZSIsImxvZyIsInByaW1hcnlNZW51VG9nZ2xlT3BlbiIsInNjcm9sbFRvU2VjdGlvbkZyb21IZWFkZXIiLCJzY3JvbGxUb1NlY3Rpb25Gcm9tRm9vdGVyIiwiYnJlYWtQb2ludENoZWNrIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCIkIiwiZG9jdW1lbnQiLCJvbiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJ0b2dnbGVDbGFzcyIsImZpbmQiLCJ0ZXh0IiwiaW5kZXhPZiIsImhyZWYiLCJyZXBsYWNlIiwiV1BVUkxTIiwic2l0ZXVybCIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJoYXNoIiwib2Zmc2V0IiwidG9wIiwic2VjdGlvbiIsImF0dHIiLCJyZW1vdmVDbGFzcyIsInNpemUiLCJjdXJyZW50IiwicmVhZHkiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7O0FBRUE7Ozs7OztBQUVBLElBQU1BLFNBQVNDLE9BQU9ELE1BQVAsSUFBaUIsRUFBaEMsQyxDQUpBO0FBQ0E7OztBQUtBQSxPQUFPRSxNQUFQLEdBQWdCO0FBQ2RDLE1BRGMsa0JBQ047QUFDTkgsV0FBT0ksS0FBUCxHQUFlLElBQWY7QUFDQSxRQUFJSixPQUFPSSxLQUFYLEVBQWtCO0FBQ2hCQyxjQUFRQyxHQUFSLENBQVksZUFBWjtBQUNEO0FBQ0QsU0FBS0MscUJBQUw7QUFDQSxTQUFLQyx5QkFBTDtBQUNBLFNBQUtDLHlCQUFMOztBQUVBLFNBQUtDLGVBQUw7O0FBRUFDLFlBQVFDLFNBQVIsQ0FBa0IsSUFBbEIsRUFBd0IsSUFBeEIsRUFBOEJYLE9BQU9ZLFFBQVAsQ0FBZ0JDLFFBQTlDO0FBRUQsR0FkYTtBQWVkUCx1QkFmYyxtQ0FlVztBQUN2QlEsTUFBRUMsUUFBRixFQUNHQyxFQURILENBQ00sT0FETixFQUNlLFdBRGYsRUFDNEIsVUFBVUMsS0FBVixFQUFpQjtBQUN6Q0EsWUFBTUMsY0FBTjtBQUNBSixRQUFFLElBQUYsRUFDR0ssV0FESCxDQUNlLFFBRGY7QUFFQUwsUUFBRSxLQUFGLEVBQ0dLLFdBREgsQ0FDZSxVQURmO0FBRUQsS0FQSDtBQVFELEdBeEJhO0FBeUJkWiwyQkF6QmMsdUNBeUJlO0FBQzNCTyxNQUFFLFVBQUYsRUFBY00sSUFBZCxDQUFtQixHQUFuQixFQUF3QkosRUFBeEIsQ0FBMkIsT0FBM0IsRUFBb0MsVUFBVUMsS0FBVixFQUFpQjtBQUNuRCxVQUFHSCxFQUFFLElBQUYsRUFBUU8sSUFBUixHQUFlQyxPQUFmLENBQXVCLFNBQXZCLEtBQXFDLENBQXJDLElBQTBDUixFQUFFLElBQUYsRUFBUU8sSUFBUixHQUFlQyxPQUFmLENBQXVCLGNBQXZCLEtBQTBDLENBQXBGLElBQ0FSLEVBQUUsSUFBRixFQUFRTyxJQUFSLEdBQWVDLE9BQWYsQ0FBdUIsU0FBdkIsS0FBcUMsQ0FEeEMsRUFDMkM7QUFDekM7QUFDRDtBQUNDTCxZQUFNQyxjQUFOO0FBQ0YsVUFBR2xCLE9BQU9ZLFFBQVAsQ0FBZ0JXLElBQWhCLENBQXFCRCxPQUFyQixDQUE2QixVQUE3QixLQUE0QyxDQUE1QyxJQUFpRHRCLE9BQU9ZLFFBQVAsQ0FBZ0JXLElBQWhCLENBQXFCRCxPQUFyQixDQUE2QixRQUE3QixLQUEwQyxDQUE5RixFQUFrRztBQUNoRyxZQUFJUixFQUFFLElBQUYsRUFBUU8sSUFBUixHQUFlQyxPQUFmLENBQXVCLFVBQXZCLEtBQXNDLENBQTFDLEVBQTZDO0FBQzNDdEIsaUJBQU9ZLFFBQVAsQ0FBZ0JZLE9BQWhCLENBQTJCQyxPQUFPQyxPQUFsQzs7QUFFQVosWUFBRSxZQUFGLEVBQWdCYSxPQUFoQixDQUF3QjtBQUN0QkMsdUJBQVdkLEVBQUVkLE9BQU9ZLFFBQVAsQ0FBZ0JpQixJQUFsQixFQUF3QkMsTUFBeEIsR0FBaUNDLEdBQWpDLEdBQXVDO0FBRDVCLFdBQXhCO0FBR0Q7QUFDRCxZQUFJakIsRUFBRSxJQUFGLEVBQVFPLElBQVIsR0FBZUMsT0FBZixDQUF1QixZQUF2QixLQUF3QyxDQUE1QyxFQUErQztBQUM3Q3RCLGlCQUFPWSxRQUFQLENBQWdCWSxPQUFoQixDQUEyQkMsT0FBT0MsT0FBbEM7O0FBRUFaLFlBQUUsWUFBRixFQUFnQmEsT0FBaEIsQ0FBd0I7QUFDdEJDLHVCQUFXZCxFQUFFZCxPQUFPWSxRQUFQLENBQWdCaUIsSUFBbEIsRUFBd0JDLE1BQXhCLEdBQWlDQyxHQUFqQyxHQUF1QztBQUQ1QixXQUF4QjtBQUdEO0FBQ0Y7QUFDQyxVQUFJQyxVQUFVbEIsRUFBRSxJQUFGLEVBQVFtQixJQUFSLENBQWEsTUFBYixDQUFkO0FBQ0FuQixRQUFFLFlBQUYsRUFBZ0JhLE9BQWhCLENBQXdCO0FBQ3BCQyxtQkFBV2QsRUFBRWtCLE9BQUYsRUFBV0YsTUFBWCxHQUFvQkMsR0FBcEIsR0FBMEI7QUFEakIsT0FBeEI7QUFHRmpCLFFBQUUsS0FBRixFQUFTb0IsV0FBVCxDQUFxQixVQUFyQjtBQUNBcEIsUUFBRSxXQUFGLEVBQWVvQixXQUFmLENBQTJCLFFBQTNCO0FBQ0MsS0E1Qkg7QUE2QkQsR0F2RGE7QUF3RGQxQiwyQkF4RGMsdUNBd0RlO0FBQzNCTSxNQUFFLFlBQUYsRUFBZ0JNLElBQWhCLENBQXFCLEdBQXJCLEVBQTBCSixFQUExQixDQUE2QixPQUE3QixFQUFzQyxVQUFVQyxLQUFWLEVBQWlCO0FBQ3JELFVBQUdILEVBQUUsSUFBRixFQUFRTyxJQUFSLEdBQWVDLE9BQWYsQ0FBdUIsU0FBdkIsS0FBcUMsQ0FBckMsSUFBMENSLEVBQUUsSUFBRixFQUFRTyxJQUFSLEdBQWVDLE9BQWYsQ0FBdUIsY0FBdkIsS0FBMEMsQ0FBcEYsSUFDRVIsRUFBRSxJQUFGLEVBQVFPLElBQVIsR0FBZUMsT0FBZixDQUF1QixlQUF2QixLQUEyQyxDQUQ3QyxJQUNrRFIsRUFBRSxJQUFGLEVBQVFPLElBQVIsR0FBZUMsT0FBZixDQUF1QixTQUF2QixLQUFxQyxDQUQxRixFQUM2RjtBQUMzRjtBQUNEO0FBQ0RMLFlBQU1DLGNBQU47O0FBRUEsVUFBSWMsVUFBVWxCLEVBQUUsSUFBRixFQUFRbUIsSUFBUixDQUFhLE1BQWIsQ0FBZDtBQUNBbkIsUUFBRSxZQUFGLEVBQWdCYSxPQUFoQixDQUF3QjtBQUN0QkMsbUJBQVdkLEVBQUVrQixPQUFGLEVBQVdGLE1BQVgsR0FBb0JDLEdBQXBCLEdBQTBCO0FBRGYsT0FBeEI7QUFHQWpCLFFBQUUsS0FBRixFQUFTb0IsV0FBVCxDQUFxQixVQUFyQjtBQUNBcEIsUUFBRSxXQUFGLEVBQWVvQixXQUFmLENBQTJCLFFBQTNCO0FBQ0QsS0FiRDtBQWNELEdBdkVhO0FBd0VkekIsaUJBeEVjLDZCQXdFSztBQUNqQixRQUFJMEIsZUFBS0MsT0FBTCxLQUFpQixLQUFLRCxJQUExQixFQUFnQztBQUM5QjtBQUNBO0FBQ0Q7QUFDRCxTQUFLQSxJQUFMLEdBQVlBLGVBQUtDLE9BQWpCO0FBQ0EsUUFBSXJDLE9BQU9JLEtBQVgsRUFBa0I7QUFDaEJDLGNBQVFDLEdBQVIsQ0FBWSxrQ0FBWixFQUFtRDhCLGVBQUtDLE9BQXhEO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNEO0FBdkZhLENBQWhCOztBQTBGQXRCLEVBQUVDLFFBQUYsRUFDR3NCLEtBREgsQ0FDUyxZQUFNO0FBQ1gsTUFBSXZCLEVBQUUsUUFBRixFQUFZd0IsTUFBaEIsRUFBd0I7QUFDdEJ2QyxXQUFPRSxNQUFQLENBQWNDLElBQWQ7QUFDRDtBQUNGLENBTEg7QUFNQVksRUFBRWQsTUFBRixFQUNHZ0IsRUFESCxDQUNNLFFBRE4sRUFDZ0IsWUFBTTtBQUNsQkYsSUFBRSxLQUFGLEVBQVNvQixXQUFULENBQXFCLFVBQXJCO0FBQ0FwQixJQUFFLFdBQUYsRUFBZW9CLFdBQWYsQ0FBMkIsUUFBM0I7QUFDQW5DLFNBQU9FLE1BQVAsQ0FBY1EsZUFBZDtBQUNELENBTEgsRSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cclxuLyogZ2xvYmFsIFdQVVJMUyAqL1xyXG5pbXBvcnQgc2l6ZSBmcm9tICcuL3NpemUnO1xyXG5cclxuY29uc3Qgc3BoZXJlID0gd2luZG93LnNwaGVyZSB8fCB7fTtcclxuXHJcbnNwaGVyZS5oZWFkZXIgPSB7XHJcbiAgaW5pdCAoKSB7XHJcbiAgICBzcGhlcmUuZGVidWcgPSB0cnVlO1xyXG4gICAgaWYgKHNwaGVyZS5kZWJ1Zykge1xyXG4gICAgICBjb25zb2xlLmxvZygnc3BoZXJlLmhlYWRlcicpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wcmltYXJ5TWVudVRvZ2dsZU9wZW4oKTtcclxuICAgIHRoaXMuc2Nyb2xsVG9TZWN0aW9uRnJvbUhlYWRlcigpO1xyXG4gICAgdGhpcy5zY3JvbGxUb1NlY3Rpb25Gcm9tRm9vdGVyKCk7XHJcblxyXG4gICAgdGhpcy5icmVha1BvaW50Q2hlY2soKTtcclxuXHJcbiAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xyXG5cclxuICB9LFxyXG4gIHByaW1hcnlNZW51VG9nZ2xlT3BlbiAoKSB7XHJcbiAgICAkKGRvY3VtZW50KVxyXG4gICAgICAub24oJ2NsaWNrJywgJy5idG4tbWVudScsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgJCh0aGlzKVxyXG4gICAgICAgICAgLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkKCduYXYnKVxyXG4gICAgICAgICAgLnRvZ2dsZUNsYXNzKCdleHBhbmRlZCcpO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG4gIHNjcm9sbFRvU2VjdGlvbkZyb21IZWFkZXIgKCkge1xyXG4gICAgJCgnLnByaW1hcnknKS5maW5kKCdhJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgIGlmKCQodGhpcykudGV4dCgpLmluZGV4T2YoJ1BSSVZBQ1knKSA+PSAwIHx8ICQodGhpcykudGV4dCgpLmluZGV4T2YoJ1JFR0lTVFJBVElPTicpID49IDBcclxuICAgICAgfHwgJCh0aGlzKS50ZXh0KCkuaW5kZXhPZignU1VQUE9SVCcpID49IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBpZih3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdyZWdpc3RlcicpID49IDAgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigncmV0dXJuJykgPj0gMCApIHtcclxuICAgICAgICBpZiAoJCh0aGlzKS50ZXh0KCkuaW5kZXhPZignQUJPVVQgVVMnKSA+PSAwKSB7XHJcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShgJHtXUFVSTFMuc2l0ZXVybH0vI2Fib3V0LXVzYCk7XHJcblxyXG4gICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3A6ICQod2luZG93LmxvY2F0aW9uLmhhc2gpLm9mZnNldCgpLnRvcCAtIDEwMCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJCh0aGlzKS50ZXh0KCkuaW5kZXhPZignQ09OVEFDVCBVUycpID49IDApIHtcclxuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGAke1dQVVJMUy5zaXRldXJsfS8jY29udGFjdC11c2ApO1xyXG5cclxuICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKHdpbmRvdy5sb2NhdGlvbi5oYXNoKS5vZmZzZXQoKS50b3AgLSAxMDAsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgICB2YXIgc2VjdGlvbiA9ICQodGhpcykuYXR0cignaHJlZicpO1xyXG4gICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKHNlY3Rpb24pLm9mZnNldCgpLnRvcCAtIDEwMCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAkKCduYXYnKS5yZW1vdmVDbGFzcygnZXhwYW5kZWQnKTtcclxuICAgICAgJCgnLmJ0bi1tZW51JykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG4gIHNjcm9sbFRvU2VjdGlvbkZyb21Gb290ZXIgKCkge1xyXG4gICAgJCgnLnNlY29uZGFyeScpLmZpbmQoJ2EnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgaWYoJCh0aGlzKS50ZXh0KCkuaW5kZXhPZignUHJpdmFjeScpID49IDAgfHwgJCh0aGlzKS50ZXh0KCkuaW5kZXhPZignUmVnaXN0cmF0aW9uJykgPj0gMFxyXG4gICAgICAgIHx8ICQodGhpcykudGV4dCgpLmluZGV4T2YoJ1JldHVybiBQb2xpY3knKSA+PSAwIHx8ICQodGhpcykudGV4dCgpLmluZGV4T2YoJ1N1cHBvcnQnKSA+PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICB2YXIgc2VjdGlvbiA9ICQodGhpcykuYXR0cignaHJlZicpO1xyXG4gICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XHJcbiAgICAgICAgc2Nyb2xsVG9wOiAkKHNlY3Rpb24pLm9mZnNldCgpLnRvcCAtIDEwMCxcclxuICAgICAgfSk7XHJcbiAgICAgICQoJ25hdicpLnJlbW92ZUNsYXNzKCdleHBhbmRlZCcpO1xyXG4gICAgICAkKCcuYnRuLW1lbnUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIGJyZWFrUG9pbnRDaGVjayAoKSB7XHJcbiAgICBpZiAoc2l6ZS5jdXJyZW50ID09PSB0aGlzLnNpemUpIHtcclxuICAgICAgLy8gbm8gYnJlYWtwb2ludCBjaGFuZ2VcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zaXplID0gc2l6ZS5jdXJyZW50O1xyXG4gICAgaWYgKHNwaGVyZS5kZWJ1Zykge1xyXG4gICAgICBjb25zb2xlLmxvZygnc3BoZXJlLmhlYWRlci5icmVha1BvaW50Q2hlY2sgfHwnLCBgJHtzaXplLmN1cnJlbnR9IHx8YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaWYgKHNpemUuY3VycmVudCA9PT0gJ3NjcmVlbi14eHMnIHx8IHNpemUuY3VycmVudCA9PT0gJ3NjcmVlbi14cycgfHwgc2l6ZS5jdXJyZW50ID09PSAnc2NyZWVuLXNtJykge1xyXG4gICAgLy9cclxuICAgIC8vIH0gZWxzZSB7XHJcbiAgICAvL1xyXG4gICAgLy8gfVxyXG4gIH0sXHJcbn07XHJcblxyXG4kKGRvY3VtZW50KVxyXG4gIC5yZWFkeSgoKSA9PiB7XHJcbiAgICBpZiAoJCgnaGVhZGVyJykubGVuZ3RoKSB7XHJcbiAgICAgIHNwaGVyZS5oZWFkZXIuaW5pdCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4kKHdpbmRvdylcclxuICAub24oJ3Jlc2l6ZScsICgpID0+IHtcclxuICAgICQoJ25hdicpLnJlbW92ZUNsYXNzKCdleHBhbmRlZCcpO1xyXG4gICAgJCgnLmJ0bi1tZW51JykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgc3BoZXJlLmhlYWRlci5icmVha1BvaW50Q2hlY2soKTtcclxuICB9KTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbmV3dGhlbWUvanMvZnVuY3Rpb25zL2hlYWRlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function($, Modernizr) {\n\nvar _size = __webpack_require__(4);\n\nvar _size2 = _interopRequireDefault(_size);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import helpers from './helpers';\n\nvar sphere = window.sphere || {}; /* global Modernizr */\n/* global $ */\n\nsphere.main = {\n  init: function init() {\n    sphere.debug = true;\n    if (sphere.debug) {\n      console.log('Welcome To Sphere');\n      console.log('sphere.main');\n    }\n    this.toggleConsoleLog(false);\n    this.checkSize();\n\n    // helpers.backGroundElementSrc('.background-hero-section');\n    $(window).on('load', function () {});\n  },\n  checkSize: function checkSize() {\n    $.each(_size2.default, function (index) {\n      _size2.default[index] = false;\n    });\n    if (Modernizr.mq('only all and (max-width: 479px)')) {\n      _size2.default['screen-xxs'] = true;\n      _size2.default.current = 'screen-xxs';\n    } else if (Modernizr.mq('only all and (min-width: 480px) and (max-width: 767px)')) {\n      _size2.default['screen-xs'] = true;\n      _size2.default.current = 'screen-xs';\n    } else if (Modernizr.mq('only all and (min-width: 768px) and (max-width: 1023px)')) {\n      _size2.default['screen-sm'] = true;\n      _size2.default.current = 'screen-sm';\n    } else if (Modernizr.mq('only all and (min-width: 1024px) and (max-width: 1199px)')) {\n      _size2.default['screen-md'] = true;\n      _size2.default.current = 'screen-md';\n    } else if (Modernizr.mq('only all and (min-width: 1200px) and (max-width: 1599px)')) {\n      _size2.default['screen-lg'] = true;\n      _size2.default.current = 'screen-lg';\n    } else if (Modernizr.mq('only all and (min-width: 1600px)')) {\n      _size2.default['screen-elg'] = true;\n      _size2.default.current = 'screen-elg';\n    }\n  },\n  toggleConsoleLog: function toggleConsoleLog(bool) {\n    if (bool) {\n      window.console = {};\n      console.log = function () {};\n    }\n  },\n  setCookie: function setCookie(cname, cvalue, exdays) {\n    var day = new Date();\n    day.setTime(day.getTime() + exdays * 24 * 60 * 60 * 1000);\n    var expires = 'expires=' + day.toUTCString();\n    document.cookie = cname + '=' + cvalue + '; ' + expires;\n  },\n  getCookie: function getCookie(cname) {\n    var name = cname + '=';\n    var cok = document.cookie.split(';');\n    for (var index = 0; index < cok.length; index++) {\n      var cookie = cok[index];\n      while (cookie.charAt(0) === ' ') {\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(name) === 0) {\n        return cookie.substring(name.length, cookie.length);\n      }\n    }\n    return '';\n  }\n};\n\n$(document).ready(function () {\n  sphere.main.init();\n});\n\n$(window).on('resize', function () {\n  sphere.main.checkSize();\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(24)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9uZXd0aGVtZS9qcy9mdW5jdGlvbnMvbWFpbi5qcz9jYjI5Il0sIm5hbWVzIjpbInNwaGVyZSIsIndpbmRvdyIsIm1haW4iLCJpbml0IiwiZGVidWciLCJjb25zb2xlIiwibG9nIiwidG9nZ2xlQ29uc29sZUxvZyIsImNoZWNrU2l6ZSIsIiQiLCJvbiIsImVhY2giLCJzaXplIiwiaW5kZXgiLCJNb2Rlcm5penIiLCJtcSIsImN1cnJlbnQiLCJib29sIiwic2V0Q29va2llIiwiY25hbWUiLCJjdmFsdWUiLCJleGRheXMiLCJkYXkiLCJEYXRlIiwic2V0VGltZSIsImdldFRpbWUiLCJleHBpcmVzIiwidG9VVENTdHJpbmciLCJkb2N1bWVudCIsImNvb2tpZSIsImdldENvb2tpZSIsIm5hbWUiLCJjb2siLCJzcGxpdCIsImxlbmd0aCIsImNoYXJBdCIsInN1YnN0cmluZyIsImluZGV4T2YiLCJyZWFkeSJdLCJtYXBwaW5ncyI6Ijs7QUFHQTs7Ozs7O0FBQ0E7O0FBRUEsSUFBTUEsU0FBU0MsT0FBT0QsTUFBUCxJQUFpQixFQUFoQyxDLENBTkE7QUFDQTs7QUFPQUEsT0FBT0UsSUFBUCxHQUFjO0FBQ1pDLE1BRFksa0JBQ0o7QUFDTkgsV0FBT0ksS0FBUCxHQUFlLElBQWY7QUFDQSxRQUFJSixPQUFPSSxLQUFYLEVBQWtCO0FBQ2hCQyxjQUFRQyxHQUFSLENBQVksbUJBQVo7QUFDQUQsY0FBUUMsR0FBUixDQUFZLGFBQVo7QUFDRDtBQUNELFNBQUtDLGdCQUFMLENBQXNCLEtBQXRCO0FBQ0EsU0FBS0MsU0FBTDs7QUFFQTtBQUNBQyxNQUFFUixNQUFGLEVBQ0dTLEVBREgsQ0FDTSxNQUROLEVBQ2MsWUFBTSxDQUNqQixDQUZIO0FBR0QsR0FkVztBQWVaRixXQWZZLHVCQWVDO0FBQ1hDLE1BQUVFLElBQUYsQ0FBT0MsY0FBUCxFQUFhLFVBQUNDLEtBQUQsRUFBVztBQUN0QkQscUJBQUtDLEtBQUwsSUFBYyxLQUFkO0FBQ0QsS0FGRDtBQUdB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cm5penIgKi9cclxuLyogZ2xvYmFsICQgKi9cclxuXHJcbmltcG9ydCBzaXplIGZyb20gJy4vc2l6ZSc7XHJcbi8vIGltcG9ydCBoZWxwZXJzIGZyb20gJy4vaGVscGVycyc7XHJcblxyXG5jb25zdCBzcGhlcmUgPSB3aW5kb3cuc3BoZXJlIHx8IHt9O1xyXG5cclxuc3BoZXJlLm1haW4gPSB7XHJcbiAgaW5pdCAoKSB7XHJcbiAgICBzcGhlcmUuZGVidWcgPSB0cnVlO1xyXG4gICAgaWYgKHNwaGVyZS5kZWJ1Zykge1xyXG4gICAgICBjb25zb2xlLmxvZygnV2VsY29tZSBUbyBTcGhlcmUnKTtcclxuICAgICAgY29uc29sZS5sb2coJ3NwaGVyZS5tYWluJyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnRvZ2dsZUNvbnNvbGVMb2coZmFsc2UpO1xyXG4gICAgdGhpcy5jaGVja1NpemUoKTtcclxuXHJcbiAgICAvLyBoZWxwZXJzLmJhY2tHcm91bmRFbGVtZW50U3JjKCcuYmFja2dyb3VuZC1oZXJvLXNlY3Rpb24nKTtcclxuICAgICQod2luZG93KVxyXG4gICAgICAub24oJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICAgIH0pO1xyXG4gIH0sXHJcbiAgY2hlY2tTaXplICgpIHtcclxuICAgICQuZWFjaChzaXplLCAoaW5kZXgpID0+IHtcclxuICAgICAgc2l6ZVtpbmRleF0gPSBmYWxzZTtcclxuICAgIH0pO1xyXG4gICAgaWYgKE1vZGVybml6ci5tcSgnb25seSBhbGwgYW5kIChtYXgtd2lkdGg6IDQ3OXB4KScpKSB7XHJcbiAgICAgIHNpemVbJ3NjcmVlbi14eHMnXSA9IHRydWU7XHJcbiAgICAgIHNpemUuY3VycmVudCA9ICdzY3JlZW4teHhzJztcclxuICAgIH0gZWxzZSBpZiAoTW9kZXJuaXpyLm1xKCdvbmx5IGFsbCBhbmQgKG1pbi13aWR0aDogNDgwcHgpIGFuZCAobWF4LXdpZHRoOiA3NjdweCknKSkge1xyXG4gICAgICBzaXplWydzY3JlZW4teHMnXSA9IHRydWU7XHJcbiAgICAgIHNpemUuY3VycmVudCA9ICdzY3JlZW4teHMnO1xyXG4gICAgfSBlbHNlIGlmIChNb2Rlcm5penIubXEoJ29ubHkgYWxsIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDEwMjNweCknKSkge1xyXG4gICAgICBzaXplWydzY3JlZW4tc20nXSA9IHRydWU7XHJcbiAgICAgIHNpemUuY3VycmVudCA9ICdzY3JlZW4tc20nO1xyXG4gICAgfSBlbHNlIGlmIChNb2Rlcm5penIubXEoJ29ubHkgYWxsIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIGFuZCAobWF4LXdpZHRoOiAxMTk5cHgpJykpIHtcclxuICAgICAgc2l6ZVsnc2NyZWVuLW1kJ10gPSB0cnVlO1xyXG4gICAgICBzaXplLmN1cnJlbnQgPSAnc2NyZWVuLW1kJztcclxuICAgIH0gZWxzZSBpZiAoTW9kZXJuaXpyLm1xKCdvbmx5IGFsbCBhbmQgKG1pbi13aWR0aDogMTIwMHB4KSBhbmQgKG1heC13aWR0aDogMTU5OXB4KScpKSB7XHJcbiAgICAgIHNpemVbJ3NjcmVlbi1sZyddID0gdHJ1ZTtcclxuICAgICAgc2l6ZS5jdXJyZW50ID0gJ3NjcmVlbi1sZyc7XHJcbiAgICB9IGVsc2UgaWYgKE1vZGVybml6ci5tcSgnb25seSBhbGwgYW5kIChtaW4td2lkdGg6IDE2MDBweCknKSkge1xyXG4gICAgICBzaXplWydzY3JlZW4tZWxnJ10gPSB0cnVlO1xyXG4gICAgICBzaXplLmN1cnJlbnQgPSAnc2NyZWVuLWVsZyc7XHJcbiAgICB9XHJcbiAgfSxcclxuICB0b2dnbGVDb25zb2xlTG9nIChib29sKSB7XHJcbiAgICBpZiAoYm9vbCkge1xyXG4gICAgICB3aW5kb3cuY29uc29sZSA9IHt9O1xyXG4gICAgICBjb25zb2xlLmxvZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9LFxyXG4gIHNldENvb2tpZSAoY25hbWUsIGN2YWx1ZSwgZXhkYXlzKSB7XHJcbiAgICBjb25zdCBkYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgZGF5LnNldFRpbWUoZGF5LmdldFRpbWUoKSArIChleGRheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKSk7XHJcbiAgICBjb25zdCBleHBpcmVzID0gYGV4cGlyZXM9JHtkYXkudG9VVENTdHJpbmcoKX1gO1xyXG4gICAgZG9jdW1lbnQuY29va2llID0gYCR7Y25hbWV9PSR7Y3ZhbHVlfTsgJHtleHBpcmVzfWA7XHJcbiAgfSxcclxuICBnZXRDb29raWUgKGNuYW1lKSB7XHJcbiAgICBjb25zdCBuYW1lID0gYCR7Y25hbWV9PWA7XHJcbiAgICBjb25zdCBjb2sgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb2subGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgIGxldCBjb29raWUgPSBjb2tbaW5kZXhdO1xyXG4gICAgICB3aGlsZSAoY29va2llLmNoYXJBdCgwKSA9PT0gJyAnKSB7XHJcbiAgICAgICAgY29va2llID0gY29va2llLnN1YnN0cmluZygxKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoY29va2llLmluZGV4T2YobmFtZSkgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gY29va2llLnN1YnN0cmluZyhuYW1lLmxlbmd0aCwgY29va2llLmxlbmd0aCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAnJztcclxuICB9XHJcbn07XHJcblxyXG4kKGRvY3VtZW50KVxyXG4gIC5yZWFkeSgoKSA9PiB7XHJcbiAgICBzcGhlcmUubWFpbi5pbml0KCk7XHJcbiAgfSk7XHJcblxyXG4kKHdpbmRvdylcclxuICAub24oJ3Jlc2l6ZScsICgpID0+IHtcclxuICAgIHNwaGVyZS5tYWluLmNoZWNrU2l6ZSgpO1xyXG4gIH0pO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9uZXd0aGVtZS9qcy9mdW5jdGlvbnMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function($, _) {\n\nvar _helpers = __webpack_require__(3);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _storageApi = __webpack_require__(2);\n\nvar _storageApi2 = _interopRequireDefault(_storageApi);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /* global Modernizr */\n/* global $ */\n/* global WPURLS */\n\n__webpack_require__(5);\n\nvar sphere = window.sphere || {};\n\nsphere.registration_step_one = {\n  init: function init() {\n    sphere.debug = true;\n    if (sphere.debug) {\n      console.log('sphere.registration_step_one');\n    }\n    _helpers2.default.customSelectState('.custom-select-state');\n    this.validateStepOne();\n    this.saveInputValues();\n    this.setInputValues();\n    this.tooltipHtml();\n\n    _storageApi2.default.initLocalStorage();\n\n    $('body').on('click', function (event) {\n      if (event.target.id === 'help') {\n        return;\n      }\n      if ($('.tooltip-image').length) {\n        $('[data-toggle=\\'tooltip\\']').tooltip('hide');\n      }\n    });\n\n    $(window).on('load', function () {});\n  },\n  validateStepOne: function validateStepOne() {\n    $.validator.setDefaults({\n      debug: true,\n      validClass: 'sucess',\n      errorClass: 'invalid',\n      errorElement: 'div'\n    });\n    var form = $('#step-one');\n\n    form.validate({\n      rules: {\n        name: 'required',\n        street: {\n          required: true\n        },\n        city: 'required',\n        zip: 'required',\n        phone: {\n          required: true,\n          number: true\n        },\n        id_number: 'required'\n      },\n      messages: {\n        name: 'Field is required',\n        street: 'Field is required',\n        city: 'Field is required',\n        zip: 'Field is required',\n        phone: {\n          required: 'Field is required',\n          number: 'Specify a valid phone number'\n        },\n        id_number: 'Field is required'\n      }\n    });\n    $('#submit-step-one').on('click', function () {\n      if ($('.custom-select-trigger').text() === 'State') {\n        $('#state-error').show();\n      } else {\n        $('#state-error').hide();\n      }\n      if (form.valid() && $('.custom-select-trigger').text() !== 'State') {\n        // history.pushState({}, '', `${WPURLS.siteurl}/registration/step-one/`);\n        window.location.replace(WPURLS.siteurl + '/register/step-two/');\n      } else {\n        console.log('Form Invalid');\n      }\n    });\n  },\n  saveInputValues: function saveInputValues() {\n    $('#step-one input, #step-one select').each(function () {\n      var input = $(this);\n      input.on('change', function (event) {\n        if ($(event.target).is('select')) {\n          $('div.custom-select-state').find('.custom-select-trigger').text($('select').find(':selected').text());\n          if ($('select').find(':selected').text() !== 'State') {\n            $('#state-error').hide();\n          }\n        }\n\n        var key = input.attr('name');\n        var registrationData = _defineProperty({}, key, $.trim(input.val()));\n        _storageApi2.default.setRegistration(registrationData);\n        console.log('Type: ' + input.attr('type') + ' Name: ' + input.attr('name') + ' Value: ' + input.val());\n      });\n    });\n  },\n  setInputValues: function setInputValues() {\n    var data = _storageApi2.default.getRegistration();\n    _.mapValues(data, function (value, key) {\n      if (key === 'state') {\n        $('select').val(value).prop('selected', true);\n        $(document).find('.custom-select-trigger').text($('select').find(':selected').text());\n        $('.custom-options').find('[data-value=\\'' + value + '\\']').addClass('selection');\n      } else {\n        $('#' + key).val(value);\n      }\n    });\n  },\n  tooltipHtml: function tooltipHtml() {\n    $('[data-toggle=\"tooltip\"]').tooltip({\n      html: true,\n      trigger: 'click',\n      title: '<em>Tooltip</em> <u>with</u> <b>HTML</b>',\n      template: '<div class=\"tooltip-image\" role=\"tooltip\">\\n        <div class=\"tooltip-arrow\"></div>\\n        <div class=\"image-wrapper\"> \\n                <img src=' + WPURLS.tooltip + '>    \\n        </div>\\n        </div>'\n    });\n  }\n};\n\n$(document).ready(function () {\n  if ($('#step-one').length) {\n    sphere.registration_step_one.init();\n  }\n});\n\n$(window).on('resize', function () {\n  if ($('#step-one').length) {\n    sphere.registration_step_one.checkSize();\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9uZXd0aGVtZS9qcy9mdW5jdGlvbnMvcmVnaXN0cmF0aW9uLXN0ZXAtb25lLmpzPzgzYjciXSwibmFtZXMiOlsicmVxdWlyZSIsInNwaGVyZSIsIndpbmRvdyIsInJlZ2lzdHJhdGlvbl9zdGVwX29uZSIsImluaXQiLCJkZWJ1ZyIsImNvbnNvbGUiLCJsb2ciLCJoZWxwZXJzIiwiY3VzdG9tU2VsZWN0U3RhdGUiLCJ2YWxpZGF0ZVN0ZXBPbmUiLCJzYXZlSW5wdXRWYWx1ZXMiLCJzZXRJbnB1dFZhbHVlcyIsInRvb2x0aXBIdG1sIiwic3RvcmFnZWFwaSIsImluaXRMb2NhbFN0b3JhZ2UiLCIkIiwib24iLCJldmVudCIsInRhcmdldCIsImlkIiwibGVuZ3RoIiwidG9vbHRpcCIsInZhbGlkYXRvciIsInNldERlZmF1bHRzIiwidmFsaWRDbGFzcyIsImVycm9yQ2xhc3MiLCJlcnJvckVsZW1lbnQiLCJmb3JtIiwidmFsaWRhdGUiLCJydWxlcyIsIm5hbWUiLCJzdHJlZXQiLCJyZXF1aXJlZCIsImNpdHkiLCJ6aXAiLCJwaG9uZSIsIm51bWJlciIsImlkX251bWJlciIsIm1lc3NhZ2VzIiwidGV4dCIsInNob3ciLCJoaWRlIiwidmFsaWQiLCJsb2NhdGlvbiIsInJlcGxhY2UiLCJXUFVSTFMiLCJzaXRldXJsIiwiZWFjaCIsImlucHV0IiwiaXMiLCJmaW5kIiwia2V5IiwiYXR0ciIsInJlZ2lzdHJhdGlvbkRhdGEiLCJ0cmltIiwidmFsIiwic2V0UmVnaXN0cmF0aW9uIiwiZGF0YSIsImdldFJlZ2lzdHJhdGlvbiIsIl8iLCJtYXBWYWx1ZXMiLCJ2YWx1ZSIsInByb3AiLCJkb2N1bWVudCIsImFkZENsYXNzIiwiaHRtbCIsInRyaWdnZXIiLCJ0aXRsZSIsInRlbXBsYXRlIiwicmVhZHkiLCJjaGVja1NpemUiXSwibWFwcGluZ3MiOiI7O0FBSUE7Ozs7QUFDQTs7Ozs7O2tOQUxBO0FBQ0E7QUFDQTs7QUFLQUEsbUJBQU9BLENBQUMsQ0FB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QW9JN0JqRCxhQXBJNkIseUJBb0lkO0FBQ2JHLE1BQUUseUJBQUYsRUFDR00sT0FESCxDQUNXO0FBQ1A0QyxZQUFNLElBREM7QUFFUEMsZUFBUyxPQUZGO0FBR1BDLGFBQU8sMENBSEE7QUFJUEMsMktBR21CdkIsT0FBT3hCLE9BSDFCO0FBSk8sS0FEWDtBQVlEO0FBako0QixDQUEvQjs7QUFvSkFOLEVBQUVnRCxRQUFGLEVBQ0dNLEtBREgsQ0FDUyxZQUFNO0FBQ1gsTUFBSXRELEVBQUUsV0FBRixFQUFlSyxNQUFuQixFQUEyQjtBQUN6QnBCLFdBQU9FLHFCQUFQLENBQTZCQyxJQUE3QjtBQUNEO0FBQ0YsQ0FMSDs7QUFPQVksRUFBRWQsTUFBRixFQUNHZSxFQURILENBQ00sUUFETixFQUNnQixZQUFNO0FBQ2xCLE1BQUlELEVBQUUsV0FBRixFQUFlSyxNQUFuQixFQUEyQjtBQUN6QnBCLFdBQU9FLHFCQUFQLENBQTZCb0UsU0FBN0I7QUFDRDtBQUNGLENBTEgsRSIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIE1vZGVybml6ciAqL1xyXG4vKiBnbG9iYWwgJCAqL1xyXG4vKiBnbG9iYWwgV1BVUkxTICovXHJcblxyXG5pbXBvcnQgaGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xyXG5pbXBvcnQgc3RvcmFnZWFwaSBmcm9tICcuL3N0b3JhZ2UtYXBpJztcclxuXHJcbnJlcXVpcmUoJ2pxdWVyeS12YWxpZGF0aW9uJyk7XHJcblxyXG5jb25zdCBzcGhlcmUgPSB3aW5kb3cuc3BoZXJlIHx8IHt9O1xyXG5cclxuc3BoZXJlLnJlZ2lzdHJhdGlvbl9zdGVwX29uZSA9IHtcclxuICBpbml0ICgpIHtcclxuICAgIHNwaGVyZS5kZWJ1ZyA9IHRydWU7XHJcbiAgICBpZiAoc3BoZXJlLmRlYnVnKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdzcGhlcmUucmVnaXN0cmF0aW9uX3N0ZXBfb25lJyk7XHJcbiAgICB9XHJcbiAgICBoZWxwZXJzLmN1c3RvbVNlbGVjdFN0YXRlKCcuY3VzdG9tLXNlbGVjdC1zdGF0ZScpO1xyXG4gICAgdGhpcy52YWxpZGF0ZVN0ZXBPbmUoKTtcclxuICAgIHRoaXMuc2F2ZUlucHV0VmFsdWVzKCk7XHJcbiAgICB0aGlzLnNldElucHV0VmFsdWVzKCk7XHJcbiAgICB0aGlzLnRvb2x0aXBIdG1sKCk7XHJcblxyXG4gICAgc3RvcmFnZWFwaS5pbml0TG9jYWxTdG9yYWdlKCk7XHJcblxyXG4gICAgJCgnYm9keScpXHJcbiAgICAgIC5vbignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmlkID09PSAnaGVscCcpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCQoJy50b29sdGlwLWltYWdlJykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAkKCdbZGF0YS10b2dnbGU9XFwndG9vbHRpcFxcJ10nKVxyXG4gICAgICAgICAgICAudG9vbHRpcCgnaGlkZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgJCh3aW5kb3cpXHJcbiAgICAgIC5vbignbG9hZCcsICgpID0+IHtcclxuICAgICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgdmFsaWRhdGVTdGVwT25lICgpIHtcclxuICAgICQudmFsaWRhdG9yLnNldERlZmF1bHRzKHtcclxuICAgICAgZGVidWc6IHRydWUsXHJcbiAgICAgIHZhbGlkQ2xhc3M6ICdzdWNlc3MnLFxyXG4gICAgICBlcnJvckNsYXNzOiAnaW52YWxpZCcsXHJcbiAgICAgIGVycm9yRWxlbWVudDogJ2RpdicsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGZvcm0gPSAkKCcjc3RlcC1vbmUnKTtcclxuXHJcbiAgICBmb3JtLnZhbGlkYXRlKHtcclxuICAgICAgcnVsZXM6IHtcclxuICAgICAgICBuYW1lOiAncmVxdWlyZWQnLFxyXG4gICAgICAgIHN0cmVldDoge1xyXG4gICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjaXR5OiAncmVxdWlyZWQnLFxyXG4gICAgICAgIHppcDogJ3JlcXVpcmVkJyxcclxuICAgICAgICBwaG9uZToge1xyXG4gICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgICBudW1iZXI6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpZF9udW1iZXI6ICdyZXF1aXJlZCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIG1lc3NhZ2VzOiB7XHJcbiAgICAgICAgbmFtZTogJ0ZpZWxkIGlzIHJlcXVpcmVkJyxcclxuICAgICAgICBzdHJlZXQ6ICdGaWVsZCBpcyByZXF1aXJlZCcsXHJcbiAgICAgICAgY2l0eTogJ0ZpZWxkIGlzIHJlcXVpcmVkJyxcclxuICAgICAgICB6aXA6ICdGaWVsZCBpcyByZXF1aXJlZCcsXHJcbiAgICAgICAgcGhvbmU6IHtcclxuICAgICAgICAgIHJlcXVpcmVkOiAnRmllbGQgaXMgcmVxdWlyZWQnLFxyXG4gICAgICAgICAgbnVtYmVyOiAnU3BlY2lmeSBhIHZhbGlkIHBob25lIG51bWJlcicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpZF9udW1iZXI6ICdGaWVsZCBpcyByZXF1aXJlZCcsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgICQoJyNzdWJtaXQtc3RlcC1vbmUnKVxyXG4gICAgICAub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIGlmICgkKCcuY3VzdG9tLXNlbGVjdC10cmlnZ2VyJylcclxuICAgICAgICAgICAgLnRleHQoKSA9PT0gJ1N0YXRlJykge1xyXG4gICAgICAgICAgJCgnI3N0YXRlLWVycm9yJylcclxuICAgICAgICAgICAgLnNob3coKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJCgnI3N0YXRlLWVycm9yJylcclxuICAgICAgICAgICAgLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZvcm0udmFsaWQoKSAmJiAkKCcuY3VzdG9tLXNlbGVjdC10cmlnZ2VyJylcclxuICAgICAgICAgICAgLnRleHQoKSAhPT0gJ1N0YXRlJykge1xyXG4gICAgICAgICAgLy8gaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCBgJHtXUFVSTFMuc2l0ZXVybH0vcmVnaXN0cmF0aW9uL3N0ZXAtb25lL2ApO1xyXG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoYCR7V1BVUkxTLnNpdGV1cmx9L3JlZ2lzdGVyL3N0ZXAtdHdvL2ApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnRm9ybSBJbnZhbGlkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9LFxyXG4gIHNhdmVJbnB1dFZhbHVlcyAoKSB7XHJcbiAgICAkKCcjc3RlcC1vbmUgaW5wdXQsICNzdGVwLW9uZSBzZWxlY3QnKVxyXG4gICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgaW5wdXQgPSAkKHRoaXMpO1xyXG4gICAgICAgIGlucHV0Lm9uKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgIGlmICgkKGV2ZW50LnRhcmdldClcclxuICAgICAgICAgICAgICAuaXMoJ3NlbGVjdCcpKSB7XHJcbiAgICAgICAgICAgICQoJ2Rpdi5jdXN0b20tc2VsZWN0LXN0YXRlJylcclxuICAgICAgICAgICAgICAuZmluZCgnLmN1c3RvbS1zZWxlY3QtdHJpZ2dlcicpXHJcbiAgICAgICAgICAgICAgLnRleHQoJCgnc2VsZWN0JylcclxuICAgICAgICAgICAgICAgIC5maW5kKCc6c2VsZWN0ZWQnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoKSk7XHJcbiAgICAgICAgICAgIGlmICgkKCdzZWxlY3QnKVxyXG4gICAgICAgICAgICAgICAgLmZpbmQoJzpzZWxlY3RlZCcpXHJcbiAgICAgICAgICAgICAgICAudGV4dCgpICE9PSAnU3RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgJCgnI3N0YXRlLWVycm9yJylcclxuICAgICAgICAgICAgICAgIC5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zdCBrZXkgPSBpbnB1dC5hdHRyKCduYW1lJyk7XHJcbiAgICAgICAgICBjb25zdCByZWdpc3RyYXRpb25EYXRhID0ge1xyXG4gICAgICAgICAgICBba2V5XTogJC50cmltKGlucHV0LnZhbCgpKSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBzdG9yYWdlYXBpLnNldFJlZ2lzdHJhdGlvbihyZWdpc3RyYXRpb25EYXRhKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGBUeXBlOiAke2lucHV0LmF0dHIoJ3R5cGUnKX0gTmFtZTogJHtpbnB1dC5hdHRyKCduYW1lJyl9IFZhbHVlOiAke2lucHV0LnZhbCgpfWApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG4gIHNldElucHV0VmFsdWVzICgpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBzdG9yYWdlYXBpLmdldFJlZ2lzdHJhdGlvbigpO1xyXG4gICAgXy5tYXBWYWx1ZXMoZGF0YSwgKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgaWYgKGtleSA9PT0gJ3N0YXRlJykge1xyXG4gICAgICAgICQoJ3NlbGVjdCcpXHJcbiAgICAgICAgICAudmFsKHZhbHVlKVxyXG4gICAgICAgICAgLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgJChkb2N1bWVudClcclxuICAgICAgICAgIC5maW5kKCcuY3VzdG9tLXNlbGVjdC10cmlnZ2VyJylcclxuICAgICAgICAgIC50ZXh0KCQoJ3NlbGVjdCcpXHJcbiAgICAgICAgICAgIC5maW5kKCc6c2VsZWN0ZWQnKVxyXG4gICAgICAgICAgICAudGV4dCgpKTtcclxuICAgICAgICAkKCcuY3VzdG9tLW9wdGlvbnMnKS5maW5kKGBbZGF0YS12YWx1ZT0nJHt2YWx1ZX0nXWApLmFkZENsYXNzKCdzZWxlY3Rpb24nKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkKGAjJHtrZXl9YClcclxuICAgICAgICAgIC52YWwodmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIHRvb2x0aXBIdG1sICgpIHtcclxuICAgICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKVxyXG4gICAgICAudG9vbHRpcCh7XHJcbiAgICAgICAgaHRtbDogdHJ1ZSxcclxuICAgICAgICB0cmlnZ2VyOiAnY2xpY2snLFxyXG4gICAgICAgIHRpdGxlOiAnPGVtPlRvb2x0aXA8L2VtPiA8dT53aXRoPC91PiA8Yj5IVE1MPC9iPicsXHJcbiAgICAgICAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbWFnZVwiIHJvbGU9XCJ0b29sdGlwXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW1hZ2Utd3JhcHBlclwiPiBcclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPSR7V1BVUkxTLnRvb2x0aXB9PiAgICBcclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5gLFxyXG4gICAgICB9KTtcclxuICB9LFxyXG59O1xyXG5cclxuJChkb2N1bWVudClcclxuICAucmVhZHkoKCkgPT4ge1xyXG4gICAgaWYgKCQoJyNzdGVwLW9uZScpLmxlbmd0aCkge1xyXG4gICAgICBzcGhlcmUucmVnaXN0cmF0aW9uX3N0ZXBfb25lLmluaXQoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiQod2luZG93KVxyXG4gIC5vbigncmVzaXplJywgKCkgPT4ge1xyXG4gICAgaWYgKCQoJyNzdGVwLW9uZScpLmxlbmd0aCkge1xyXG4gICAgICBzcGhlcmUucmVnaXN0cmF0aW9uX3N0ZXBfb25lLmNoZWNrU2l6ZSgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9uZXd0aGVtZS9qcy9mdW5jdGlvbnMvcmVnaXN0cmF0aW9uLXN0ZXAtb25lLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function($, _) {\n\nvar _helpers = __webpack_require__(3);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _storageApi = __webpack_require__(2);\n\nvar _storageApi2 = _interopRequireDefault(_storageApi);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /* eslint-disable */\n/* global Modernizr */\n/* global $ */\n/* global WPURLS */\n\n__webpack_require__(5);\n\nvar sphere = window.sphere || {};\n\nsphere.registration_step_two = {\n  init: function init() {\n    sphere.debug = true;\n    if (sphere.debug) {\n      console.log('sphere.registration_step_two');\n    }\n    _helpers2.default.customSelectReason('.custom-select-reason');\n    this.customValidatorMethods();\n    this.validateStepTwo();\n    this.saveInputValues();\n    this.setInputValues();\n    this.preventMultipleCheckboxSelect('.usage .checkbox-input');\n    this.preventMultipleCheckboxSelect('.entries .checkbox-input');\n    this.preventMultipleCheckboxSelect('.people .checkbox-input');\n    _storageApi2.default.initLocalStorage();\n\n    if ($('.input-wrapper.other').is(':visible')) {\n      $('.input-wrapper.reason').css('margin-bottom', '27px');\n    } else {\n      $('.input-wrapper.reason').css('margin-bottom', '38px');\n    }\n    $(window).on('load', function () {});\n  },\n  preventMultipleCheckboxSelect: function preventMultipleCheckboxSelect(element) {\n    $(element).on('click', function () {\n      $(element).not(this).prop('checked', false);\n    });\n  },\n  customValidatorMethods: function customValidatorMethods() {\n    $.validator.addMethod('usageInput', function () {\n      if ($('.usage input:checked').length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }, 'Check one of the above options');\n\n    $.validator.addMethod('entriesInput', function () {\n      if ($('.entries input:checked').length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }, 'Check one of the above options');\n\n    $.validator.addMethod('peopleInput', function () {\n      if ($('.people input:checked').length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }, 'Check one of the above options');\n  },\n  validateStepTwo: function validateStepTwo() {\n    var _this = this;\n\n    $.validator.setDefaults({\n      debug: true,\n      validClass: 'sucess',\n      errorClass: 'invalid',\n      errorElement: 'div'\n    });\n\n    var checkboxes_usage = $('.usage .checkbox-input');\n    var checkbox_usage_names = $.map(checkboxes_usage, function (e, i) {\n      return $(e).attr(\"name\");\n    }).join(\" \");\n\n    var checkboxes_entries = $('.entries .checkbox-input');\n    var checkbox_entries_names = $.map(checkboxes_entries, function (e, i) {\n      return $(e).attr(\"name\");\n    }).join(\" \");\n\n    var checkboxes_people = $('.people .checkbox-input');\n    var checkbox_people_names = $.map(checkboxes_people, function (e, i) {\n      return $(e).attr(\"name\");\n    }).join(\" \");\n\n    var form = $('#step-two');\n\n    form.validate({\n      rules: {\n        usage: {\n          usageInput: true\n        },\n        entries: {\n          entriesInput: true\n        },\n        people: {\n          peopleInput: true\n        },\n        other: {\n          required: true\n        }\n      },\n      errorPlacement: function errorPlacement(error, element) {\n        error.appendTo(element.parents('.input-wrapper'));\n      },\n      groups: {\n        usage: checkbox_usage_names,\n        entries: checkbox_entries_names,\n        people: checkbox_people_names\n      }\n    });\n    $('#submit-step-two').on('click', function (e) {\n      e.preventDefault();\n      if ($('.custom-select-trigger').text() === 'Select') {\n        $('#reason-error').show();\n      } else {\n        $('#reason-error').hide();\n      }\n      if (form.valid() && $('.custom-select-trigger').text() !== 'Select') {\n        console.log(form.valid());\n        _this.submitForm();\n        $('#submit-step-two').prop('disabled', true);\n      } else {\n        console.log('Form Invalid');\n      }\n    });\n  },\n  submitForm: function submitForm() {\n\n    // Compile our data object - notice that it is only the email as opposed to the admin-ajax method.\n    // The nonce is sent in a request header - see beforeSend in $.ajax\n    // No action is required, we specify the direct endpoint we created above as the url in $.ajax\n    var data = JSON.stringify(_storageApi2.default.getFromLocalStorage());\n\n    console.log(data);\n    // Fire our ajax request!\n    $.ajax({\n      method: 'POST',\n      contentType: 'application/json',\n      // Here we supply the endpoint url, as opposed to the action in the data object with the admin-ajax method\n      url: WPURLS.api_url + 'save/',\n      data: data,\n      beforeSend: function beforeSend(xhr) {\n        // Here we set a header 'X-WP-Nonce' with the nonce as opposed to the nonce in the data object with admin-ajax\n        xhr.setRequestHeader('X-WP-Nonce', WPURLS.api_nonce);\n      },\n      success: function success(response) {\n        console.log(response);\n        if (response.error) {\n          $('#result').addClass('error').html(response.message);\n        }\n        if (response.success) {\n          $('#result').addClass('success').html(response.message);\n          // history.pushState({}, '', `${WPURLS.siteurl}/`);\n          window.location.replace(WPURLS.siteurl + '/register/success/');\n          _storageApi2.default.reset();\n        }\n      },\n      fail: function fail(response) {\n        console.log(response);\n        $('#submit-step-two').prop('disabled', false);\n        $('#result').addClass('error').html('Something went wrong. Refresh page and try again.');\n      }\n    });\n  },\n  saveInputValues: function saveInputValues() {\n    $('#step-two input, #step-two select').each(function () {\n      var input = $(this);\n      input.on('change', function (event) {\n        if ($(event.target).is('select')) {\n          $('div.custom-select-reason').find('.custom-select-trigger').text($('select').find(':selected').text());\n\n          if ($('select').find(':selected').text() !== 'Select') {\n            $('#reason-error').hide();\n          }\n        }\n        var key = input.attr('name');\n        var registrationData = _defineProperty({}, key, $.trim(input.val()));\n        _storageApi2.default.setRegistration(registrationData);\n        console.log('Type: ' + input.attr('type') + ' Name: ' + input.attr('name') + ' Value: ' + input.val());\n      });\n    });\n  },\n  setInputValues: function setInputValues() {\n    var data = _storageApi2.default.getRegistration();\n    _.mapValues(data, function (value, key) {\n      if (key === 'reason') {\n        $('select').val(value).prop('selected', true);\n        $(document).find('.custom-select-trigger').text($('select').find(':selected').text());\n        if (value === 'OT') {\n          $('.input-wrapper.other').show();\n        }\n        $('.custom-options').find('[data-value=\\'' + value + '\\']').addClass('selection');\n      }\n      if (key === 'usage') {\n        $('.usage .checkbox-input:checkbox[value=' + value + ']').prop('checked', true);\n      }\n      if (key === 'entries') {\n        $('.entries .checkbox-input:checkbox[value=' + value + ']').prop('checked', true);\n      }\n      if (key === 'people') {\n        $('.people .checkbox-input:checkbox[value=' + value + ']').prop('checked', true);\n      } else {\n        $('#' + key).val(value);\n      }\n    });\n  }\n};\n\n$(document).ready(function () {\n  if ($('#step-two').length) {\n    sphere.registration_step_two.init();\n  }\n});\n\n$(window).on('resize', function () {\n  if ($('#step-two').length) {\n    sphere.registration_step_two.checkSize();\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function($, _) {\n\nvar _helpers = __webpack_require__(3);\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nvar _storageApi = __webpack_require__(2);\n\nvar _storageApi2 = _interopRequireDefault(_storageApi);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /* eslint-disable */\n/* global Modernizr */\n/* global $ */\n/* global WPURLS */\n\n__webpack_require__(5);\n\nvar sphere = window.sphere || {};\n\nsphere.return = {\n  init: function init() {\n    sphere.debug = true;\n    if (sphere.debug) {\n      console.log('sphere.return');\n    }\n    _helpers2.default.customSelectAction('.custom-select-action');\n    _helpers2.default.customSelectReturn('.custom-select-return');\n    this.validateReturn();\n    this.saveInputValues();\n    this.setInputValues();\n\n    _storageApi2.default.initLocalStorage2();\n    $(window).on('load', function () {});\n  },\n  validateReturn: function validateReturn() {\n    var _this = this;\n\n    $.validator.setDefaults({\n      debug: true,\n      validClass: 'sucess',\n      errorClass: 'invalid',\n      errorElement: 'div'\n    });\n\n    var form = $('#return-form');\n\n    form.validate({\n      rules: {\n        name: 'required',\n        email: {\n          required: true,\n          email: true\n        },\n        order: 'required',\n        replacement: 'required'\n      },\n      messages: {\n        name: 'Field is required',\n        email: {\n          required: 'Field is required',\n          number: 'Specify a valid email address'\n        },\n        order: 'Field is required',\n        replacement: 'Field is required'\n      }\n    });\n    $('#submit-return').on('click', function (e) {\n      e.preventDefault();\n      if ($('.custom-select-trigger-action').text() === 'Please select an action') {\n        $('#action-error').show();\n      } else {\n        $('#action-error').hide();\n      }\n      if ($('.custom-select-trigger-return').text() === 'Please select return reason') {\n        $('#return-error').show();\n      } else {\n        $('#return-error').hide();\n      }\n      if (form.valid() && $('.custom-select-trigger-action').text() !== 'Please select an action' && $('.custom-select-trigger-return').text() !== 'Please select return reason') {\n        console.log(form.valid());\n        _this.submitForm();\n        $('#submit-return').prop('disabled', true);\n        $('.loader').css('display', 'block');\n      } else {\n        console.log('Form Invalid');\n      }\n    });\n  },\n  submitForm: function submitForm() {\n\n    // Compile our data object - notice that it is only the email as opposed to the admin-ajax method.\n    // The nonce is sent in a request header - see beforeSend in $.ajax\n    // No action is required, we specify the direct endpoint we created above as the url in $.ajax\n    var data = JSON.stringify(_storageApi2.default.getFromLocalStorage2());\n\n    console.log(data);\n    // Fire our ajax request!\n    $.ajax({\n      method: 'POST',\n      contentType: 'application/json',\n      // Here we supply the endpoint url, as opposed to the action in the data object with the admin-ajax method\n      url: WPURLS.api_url + 'send/',\n      data: data,\n      beforeSend: function beforeSend(xhr) {\n        // Here we set a header 'X-WP-Nonce' with the nonce as opposed to the nonce in the data object with admin-ajax\n        xhr.setRequestHeader('X-WP-Nonce', WPURLS.api_nonce);\n      },\n      success: function success(response) {\n        console.log(response);\n        if (response.error) {\n          $('#result').addClass('error').html(response.data.message);\n        }\n        if (response.success) {\n          $('#result').addClass('success').html(response.data.message);\n\n          // window.location.replace(`${WPURLS.siteurl}/registration/success/`);\n          $('#return-form').trigger('reset');\n          $('.custom-select-trigger-action').text('Please select an action');\n          $('.custom-select-trigger-return').text('Please select return reason');\n          _storageApi2.default.reset2();\n        }\n        $('#submit-return').prop('disabled', false);\n        $('.loader').css('display', 'none');\n      },\n      fail: function fail(response) {\n        console.log(response);\n        $('#submit-return').prop('disabled', false);\n        $('.loader').css('display', 'none');\n        $('#result').addClass('error').html('Something went wrong. Refresh page and try again.');\n      }\n    });\n  },\n  saveInputValues: function saveInputValues() {\n    $('#return-form input, #return-form select, #return-form textarea').each(function () {\n      var input = $(this);\n      input.on('change', function (event) {\n        if ($(event.target).is('select')) {\n          $('div.custom-select-action').find('.custom-select-trigger-action').text($('select').find(':selected').text());\n          $('div.custom-select-return').find('.custom-select-trigger-return').text($('select').find(':selected').text());\n\n          if ($('select.custom-select-action').find(':selected').text() !== 'Please select an action') {\n            $('#action-error').hide();\n          }\n\n          if ($('select.custom-select-return').find(':selected').text() !== 'Please select return reason') {\n            $('#return-error').hide();\n          }\n        }\n        var key = input.attr('name');\n        var returnData = _defineProperty({}, key, $.trim(input.val()));\n        _storageApi2.default.setReturn(returnData);\n        console.log('Type: ' + input.attr('type') + ' Name: ' + input.attr('name') + ' Value: ' + input.val());\n      });\n    });\n  },\n  setInputValues: function setInputValues() {\n    var data = _storageApi2.default.getReturn();\n    _.mapValues(data, function (value, key) {\n      if (key === 'action') {\n        $('select.custom-select-action').val(value).prop('selected', true);\n        $(document).find('.custom-select-trigger-action').text($('select.custom-select-action').find(':selected').text());\n        if (value === 'Exchange' || value === 'Other') {\n          $('.input-wrapper.replacement').show();\n        }\n        $('.custom-options-action').find('[data-value=\\'' + value + '\\']').addClass('selection');\n\n        if (value !== 'Please select an action') {\n          $('.input-wrapper.return').show();\n        }\n      }\n\n      if (key === 'return') {\n        $('select.custom-select-return').val(value).prop('selected', true);\n        $(document).find('.custom-select-trigger-return').text($('select.custom-select-return').find(':selected').text());\n\n        $('.custom-options-return').find('[data-value=\\'' + value + '\\']').addClass('selection');\n      } else {\n        $('#' + key).val(value);\n      }\n    });\n  }\n};\n\n$(document).ready(function () {\n  if ($('#return-form').length) {\n    sphere.return.init();\n  }\n});\n\n$(window).on('resize', function () {\n  if ($('#return-form').length) {\n    sphere.return.checkSize();\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function($, jQuery) {\n\n/* eslint-disable */\nvar Draggabilly = __webpack_require__(6);\n$().ready(readyFunction);\n\nvar rzObject = {};\nrzObject.location = 'index';\n\nfunction readyFunction() {\n  var active = false;\n  if (active) {\n    $.responsivizr({\n      helper: 'dev',\n      debug: 1,\n      overlay: '../../wp-content/themes/newtheme/mockups/return.png'\n    });\n    // $('.turn-on').click(); // UNCOMMENT TO ACTIVATE OVERLAY ON READY\n  }\n}\n\n(function ($) {\n  $.responsivizr = function (opts) {\n    var defaults = {\n      helper: false,\n      debug: false,\n      overlay: false\n    };\n    $.rz.options = $.extend(defaults, opts);\n    $.rz.helper();\n  };\n\n  $.rz = {\n\n    options: '',\n    // HELPER OVERLAY FUNCTION (SHOWS SIZE INFO AND OVERLAY MOCKUPS)\n    helper: function helper(size) {\n      if (!$('.rz-helper').length) {\n        $('<div class=\"rz-helper\"><span class=\"size\"></span> <a href=\"javascript:;\" class=\"turn-on\">Overlay</a></div>').appendTo('body');\n      }\n      if ($.rz.options.helper == 'dev') {\n        $('.rz-helper').addClass('dev');\n\n        if ($.rz.options.overlay) {\n          $(document).on('click', '.rz-helper .turn-on', function () {\n            if ($('.rz-overlay').length) {\n              $('.rz-overlay').toggle();\n              $('html').toggleClass('whiteout');\n            } else {\n              var checkKey = function checkKey(e) {\n                e = e || window.event;\n\n                var x = parseInt($('.rz-overlay img').css('left'), 10);\n                var y = parseInt($('.rz-overlay img').css('top'), 10);\n                var isValidControl = false;\n\n                if (e.keyCode == '37') {\n                  // left arrow\n                  x--;\n                  isValidControl = true;\n                }\n                if (e.keyCode == '39') {\n                  // right arrow\n                  x++;\n                  isValidControl = true;\n                }\n                if (e.keyCode == '38') {\n                  // up arrow\n                  y--;\n                  isValidControl = true;\n                }\n                if (e.keyCode == '40') {\n                  // down arrow\n                  y++;\n                  isValidControl = true;\n                }\n\n                if (!isValidControl) return;\n\n                $('.rz-overlay img').css('left', x);\n                $('.rz-overlay img').css('top', y);\n\n                position = x + '.' + y;\n                $.cookie(cookieName, position);\n              };\n\n              $('html').addClass('whiteout');\n\n              var cookieName = 'rzObject.' + rzObject.location;\n              var position = '100.40';\n              if ($.cookie(cookieName) !== undefined) {\n                position = $.cookie(cookieName);\n              }\n              var posArray = position.split('.');\n\n              $('<div class=\"rz-overlay\"><img style=\"left: ' + posArray[0] + 'px; top: ' + posArray[1] + 'px; \" src=\"' + $.rz.options.overlay + '\"/></div>').appendTo('body');\n              var dragElem = $('.rz-overlay img')[0];\n              $('.rz-overlay img').on('dragstart', function (event) {\n                event.preventDefault();\n              });\n\n              var draggie = new Draggabilly(dragElem, {});\n\n              draggie.on('dragEnd', function () {\n                var x = parseInt($('.rz-overlay img').css('left'), 10);\n                var y = parseInt($('.rz-overlay img').css('top'), 10);\n                position = x + '.' + y;\n                $.cookie(cookieName, position);\n                console.log(position);\n              });\n\n              document.onkeydown = checkKey;\n            }\n          });\n        }\n      }\n      var mapper = {\n        'good-size': 'Good width, 950px or more',\n        'bad-size': 'Warning: Increase window width to 950px or more'\n      };\n      $('.rz-helper .size').text('W: ' + $(window).width() + 'px');\n    }\n  };\n})(jQuery);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(jQuery) {/*!\n * Bootstrap v3.4.1 (https://getbootstrap.com/)\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under the MIT license\n */\n\nif (typeof jQuery === 'undefined') {\n  throw new Error('Bootstrap\\'s JavaScript requires jQuery')\n}\n\n+function ($) {\n  'use strict';\n  var version = $.fn.jquery.split(' ')[0].split('.')\n  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 3)) {\n    throw new Error('Bootstrap\\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4')\n  }\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: transition.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#transitions\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // CSS TRANSITION SUPPORT (Shoutout: https://modernizr.com/)\n  // ============================================================\n\n  function transitionEnd() {\n    var el = document.createElement('bootstrap')\n\n    var transEndEventNames = {\n      WebkitTransition : 'webkitTransitionEnd',\n      MozTransition    : 'transitionend',\n      OTransition      : 'oTransitionEnd otransitionend',\n      transition       : 'transitionend'\n    }\n\n    for (var name in transEndEventNames) {\n      if (el.style[name] !== undefined) {\n        return { end: transEndEventNames[name] }\n      }\n    }\n\n    return false // explicit for ie8 (  ._.)\n  }\n\n  // https://blog.alexmaccaw.com/css-transitions\n  $.fn.emulateTransitionEnd = function (duration) {\n    var called = false\n    var $el = this\n    $(this).one('bsTransitionEnd', function () { called = true })\n    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }\n    setTimeout(callback, duration)\n    return this\n  }\n\n  $(function () {\n    $.support.transition = transitionEnd()\n\n    if (!$.support.transition) return\n\n    $.event.special.bsTransitionEnd = {\n      bindType: $.support.transition.end,\n      delegateType: $.support.transition.end,\n      handle: function (e) {\n        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\n      }\n    }\n  })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: alert.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#alerts\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // ALERT CLASS DEFINITION\n  // ======================\n\n  var dismiss = '[data-dismiss=\"alert\"]'\n  var Alert   = function (el) {\n    $(el).on('click', dismiss, this.close)\n  }\n\n  Alert.VERSION = '3.4.1'\n\n  Alert.TRANSITION_DURATION = 150\n\n  Alert.prototype.close = function (e) {\n    var $this    = $(this)\n    var selector = $this.attr('data-target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    selector    = selector === '#' ? [] : selector\n    var $parent = $(document).find(selector)\n\n    if (e) e.preventDefault()\n\n    if (!$parent.length) {\n      $parent = $this.closest('.alert')\n    }\n\n    $parent.trigger(e = $.Event('close.bs.alert'))\n\n    if (e.isDefaultPrevented()) return\n\n    $parent.removeClass('in')\n\n    function removeElement() {\n      // detach from parent, fire event then clean up data\n      $parent.detach().trigger('closed.bs.alert').remove()\n    }\n\n    $.support.transition && $parent.hasClass('fade') ?\n      $parent\n        .one('bsTransitionEnd', removeElement)\n        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :\n      removeElement()\n  }\n\n\n  // ALERT PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.alert')\n\n      if (!data) $this.data('bs.alert', (data = new Alert(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  var old = $.fn.alert\n\n  $.fn.alert             = Plugin\n  $.fn.alert.Constructor = Alert\n\n\n  // ALERT NO CONFLICT\n  // =================\n\n  $.fn.alert.noConflict = function () {\n    $.fn.alert = old\n    return this\n  }\n\n\n  // ALERT DATA-API\n  // ==============\n\n  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: button.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = function (element, options) {\n    this.$element  = $(element)\n    this.options   = $.extend({}, Button.DEFAULTS, options)\n    this.isLoading = false\n  }\n\n  Button.VERSION  = '3.4.1'\n\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  }\n\n  Button.prototype.setState = function (state) {\n    var d    = 'disabled'\n    var $el  = this.$element\n    var val  = $el.is('input') ? 'val' : 'html'\n    var data = $el.data()\n\n    state += 'Text'\n\n    if (data.resetText == null) $el.data('resetText', $el[val]())\n\n    // push to event loop to allow forms to submit\n    setTimeout($.proxy(function () {\n      $el[val](data[state] == null ? this.options[state] : data[state])\n\n      if (state == 'loadingText') {\n        this.isLoading = true\n        $el.addClass(d).attr(d, d).prop(d, true)\n      } else if (this.isLoading) {\n        this.isLoading = false\n        $el.removeClass(d).removeAttr(d).prop(d, false)\n      }\n    }, this), 0)\n  }\n\n  Button.prototype.toggle = function () {\n    var changed = true\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\n\n    if ($parent.length) {\n      var $input = this.$element.find('input')\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked')) changed = false\n        $parent.find('.active').removeClass('active')\n        this.$element.addClass('active')\n      } else if ($input.prop('type') == 'checkbox') {\n        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\n        this.$element.toggleClass('active')\n      }\n      $input.prop('checked', this.$element.hasClass('active'))\n      if (changed) $input.trigger('change')\n    } else {\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\n      this.$element.toggleClass('active')\n    }\n  }\n\n\n  // BUTTON PLUGIN DEFINITION\n  // ========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.button')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.button', (data = new Button(this, options)))\n\n      if (option == 'toggle') data.toggle()\n      else if (option) data.setState(option)\n    })\n  }\n\n  var old = $.fn.button\n\n  $.fn.button             = Plugin\n  $.fn.button.Constructor = Button\n\n\n  // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old\n    return this\n  }\n\n\n  // BUTTON DATA-API\n  // ===============\n\n  $(document)\n    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      var $btn = $(e.target).closest('.btn')\n      Plugin.call($btn, 'toggle')\n      if (!($(e.target).is('input[type=\"radio\"], input[type=\"checkbox\"]'))) {\n        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes\n        e.preventDefault()\n        // The target component still receive the focus\n        if ($btn.is('input,button')) $btn.trigger('focus')\n        else $btn.find('input:visible,button:visible').first().trigger('focus')\n      }\n    })\n    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\n    })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: carousel.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#carousel\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // CAROUSEL CLASS DEFINITION\n  // =========================\n\n  var Carousel = function (element, options) {\n    this.$element    = $(element)\n    this.$indicators = this.$element.find('.carousel-indicators')\n    this.options     = options\n    this.paused      = null\n    this.sliding     = null\n    this.interval    = null\n    this.$active     = null\n    this.$items      = null\n\n    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))\n\n    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element\n      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))\n      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))\n  }\n\n  Carousel.VERSION  = '3.4.1'\n\n  Carousel.TRANSITION_DURATION = 600\n\n  Carousel.DEFAULTS = {\n    interval: 5000,\n    pause: 'hover',\n    wrap: true,\n    keyboard: true\n  }\n\n  Carousel.prototype.keydown = function (e) {\n    if (/input|textarea/i.test(e.target.tagName)) return\n    switch (e.which) {\n      case 37: this.prev(); break\n      case 39: this.next(); break\n      default: return\n    }\n\n    e.preventDefault()\n  }\n\n  Carousel.prototype.cycle = function (e) {\n    e || (this.paused = false)\n\n    this.interval && clearInterval(this.interval)\n\n    this.options.interval\n      && !this.paused\n      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))\n\n    return this\n  }\n\n  Carousel.prototype.getItemIndex = function (item) {\n    this.$items = item.parent().children('.item')\n    return this.$items.index(item || this.$active)\n  }\n\n  Carousel.prototype.getItemForDirection = function (direction, active) {\n    var activeIndex = this.getItemIndex(active)\n    var willWrap = (direction == 'prev' && activeIndex === 0)\n                || (direction == 'next' && activeIndex == (this.$items.length - 1))\n    if (willWrap && !this.options.wrap) return active\n    var delta = direction == 'prev' ? -1 : 1\n    var itemIndex = (activeIndex + delta) % this.$items.length\n    return this.$items.eq(itemIndex)\n  }\n\n  Carousel.prototype.to = function (pos) {\n    var that        = this\n    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))\n\n    if (pos > (this.$items.length - 1) || pos < 0) return\n\n    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, \"slid\"\n    if (activeIndex == pos) return this.pause().cycle()\n\n    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))\n  }\n\n  Carousel.prototype.pause = function (e) {\n    e || (this.paused = true)\n\n    if (this.$element.find('.next, .prev').length && $.support.transition) {\n      this.$element.trigger($.support.transition.end)\n      this.cycle(true)\n    }\n\n    this.interval = clearInterval(this.interval)\n\n    return this\n  }\n\n  Carousel.prototype.next = function () {\n    if (this.sliding) return\n    return this.slide('next')\n  }\n\n  Carousel.prototype.prev = function () {\n    if (this.sliding) return\n    return this.slide('prev')\n  }\n\n  Carousel.prototype.slide = function (type, next) {\n    var $active   = this.$element.find('.item.active')\n    var $next     = next || this.getItemForDirection(type, $active)\n    var isCycling = this.interval\n    var direction = type == 'next' ? 'left' : 'right'\n    var that      = this\n\n    if ($next.hasClass('active')) return (this.sliding = false)\n\n    var relatedTarget = $next[0]\n    var slideEvent = $.Event('slide.bs.carousel', {\n      relatedTarget: relatedTarget,\n      direction: direction\n    })\n    this.$element.trigger(slideEvent)\n    if (slideEvent.isDefaultPrevented()) return\n\n    this.sliding = true\n\n    isCycling && this.pause()\n\n    if (this.$indicators.length) {\n      this.$indicators.find('.active').removeClass('active')\n      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])\n      $nextIndicator && $nextIndicator.addClass('active')\n    }\n\n    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, \"slid\"\n    if ($.support.transition && this.$element.hasClass('slide')) {\n      $next.addClass(type)\n      if (typeof $next === 'object' && $next.length) {\n        $next[0].offsetWidth // force reflow\n      }\n      $active.addClass(direction)\n      $next.addClass(direction)\n      $active\n        .one('bsTransitionEnd', function () {\n          $next.removeClass([type, direction].join(' ')).addClass('active')\n          $active.removeClass(['active', direction].join(' '))\n          that.sliding = false\n          setTimeout(function () {\n            that.$element.trigger(slidEvent)\n          }, 0)\n        })\n        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)\n    } else {\n      $active.removeClass('active')\n      $next.addClass('active')\n      this.sliding = false\n      this.$element.trigger(slidEvent)\n    }\n\n    isCycling && this.cycle()\n\n    return this\n  }\n\n\n  // CAROUSEL PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.carousel')\n      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)\n      var action  = typeof option == 'string' ? option : options.slide\n\n      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))\n      if (typeof option == 'number') data.to(option)\n      else if (action) data[action]()\n      else if (options.interval) data.pause().cycle()\n    })\n  }\n\n  var old = $.fn.carousel\n\n  $.fn.carousel             = Plugin\n  $.fn.carousel.Constructor = Carousel\n\n\n  // CAROUSEL NO CONFLICT\n  // ====================\n\n  $.fn.carousel.noConflict = function () {\n    $.fn.carousel = old\n    return this\n  }\n\n\n  // CAROUSEL DATA-API\n  // =================\n\n  var clickHandler = function (e) {\n    var $this   = $(this)\n    var href    = $this.attr('href')\n    if (href) {\n      href = href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\n    }\n\n    var target  = $this.attr('data-target') || href\n    var $target = $(document).find(target)\n\n    if (!$target.hasClass('carousel')) return\n\n    var options = $.extend({}, $target.data(), $this.data())\n    var slideIndex = $this.attr('data-slide-to')\n    if (slideIndex) options.interval = false\n\n    Plugin.call($target, options)\n\n    if (slideIndex) {\n      $target.data('bs.carousel').to(slideIndex)\n    }\n\n    e.preventDefault()\n  }\n\n  $(document)\n    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)\n    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)\n\n  $(window).on('load', function () {\n    $('[data-ride=\"carousel\"]').each(function () {\n      var $carousel = $(this)\n      Plugin.call($carousel, $carousel.data())\n    })\n  })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: collapse.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#collapse\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n/* jshint latedef: false */\n\n+function ($) {\n  'use strict';\n\n  // COLLAPSE PUBLIC CLASS DEFINITION\n  // ================================\n\n  var Collapse = function (element, options) {\n    this.$element      = $(element)\n    this.options       = $.extend({}, Collapse.DEFAULTS, options)\n    this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +\n                           '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')\n    this.transitioning = null\n\n    if (this.options.parent) {\n      this.$parent = this.getParent()\n    } else {\n      this.addAriaAndCollapsedClass(this.$element, this.$trigger)\n    }\n\n    if (this.options.toggle) this.toggle()\n  }\n\n  Collapse.VERSION  = '3.4.1'\n\n  Collapse.TRANSITION_DURATION = 350\n\n  Collapse.DEFAULTS = {\n    toggle: true\n  }\n\n  Collapse.prototype.dimension = function () {\n    var hasWidth = this.$element.hasClass('width')\n    return hasWidth ? 'width' : 'height'\n  }\n\n  Collapse.prototype.show = function () {\n    if (this.transitioning || this.$element.hasClass('in')) return\n\n    var activesData\n    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\n\n    if (actives && actives.length) {\n      activesData = actives.data('bs.collapse')\n      if (activesData && activesData.transitioning) return\n    }\n\n    var startEvent = $.Event('show.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    if (actives && actives.length) {\n      Plugin.call(actives, 'hide')\n      activesData || actives.data('bs.collapse', null)\n    }\n\n    var dimension = this.dimension()\n\n    this.$element\n      .removeClass('collapse')\n      .addClass('collapsing')[dimension](0)\n      .attr('aria-expanded', true)\n\n    this.$trigger\n      .removeClass('collapsed')\n      .attr('aria-expanded', true)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse in')[dimension]('')\n      this.transitioning = 0\n      this.$element\n        .trigger('shown.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    var scrollSize = $.camelCase(['scroll', dimension].join('-'))\n\n    this.$element\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])\n  }\n\n  Collapse.prototype.hide = function () {\n    if (this.transitioning || !this.$element.hasClass('in')) return\n\n    var startEvent = $.Event('hide.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    var dimension = this.dimension()\n\n    this.$element[dimension](this.$element[dimension]())[0].offsetHeight\n\n    this.$element\n      .addClass('collapsing')\n      .removeClass('collapse in')\n      .attr('aria-expanded', false)\n\n    this.$trigger\n      .addClass('collapsed')\n      .attr('aria-expanded', false)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.transitioning = 0\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse')\n        .trigger('hidden.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    this.$element\n      [dimension](0)\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)\n  }\n\n  Collapse.prototype.toggle = function () {\n    this[this.$element.hasClass('in') ? 'hide' : 'show']()\n  }\n\n  Collapse.prototype.getParent = function () {\n    return $(document).find(this.options.parent)\n      .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\n      .each($.proxy(function (i, element) {\n        var $element = $(element)\n        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\n      }, this))\n      .end()\n  }\n\n  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\n    var isOpen = $element.hasClass('in')\n\n    $element.attr('aria-expanded', isOpen)\n    $trigger\n      .toggleClass('collapsed', !isOpen)\n      .attr('aria-expanded', isOpen)\n  }\n\n  function getTargetFromTrigger($trigger) {\n    var href\n    var target = $trigger.attr('data-target')\n      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\n\n    return $(document).find(target)\n  }\n\n\n  // COLLAPSE PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.collapse')\n      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false\n      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.collapse\n\n  $.fn.collapse             = Plugin\n  $.fn.collapse.Constructor = Collapse\n\n\n  // COLLAPSE NO CONFLICT\n  // ====================\n\n  $.fn.collapse.noConflict = function () {\n    $.fn.collapse = old\n    return this\n  }\n\n\n  // COLLAPSE DATA-API\n  // =================\n\n  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\n    var $this   = $(this)\n\n    if (!$this.attr('data-target')) e.preventDefault()\n\n    var $target = getTargetFromTrigger($this)\n    var data    = $target.data('bs.collapse')\n    var option  = data ? 'toggle' : $this.data()\n\n    Plugin.call($target, option)\n  })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: dropdown.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#dropdowns\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // DROPDOWN CLASS DEFINITION\n  // =========================\n\n  var backdrop = '.dropdown-backdrop'\n  var toggle   = '[data-toggle=\"dropdown\"]'\n  var Dropdown = function (element) {\n    $(element).on('click.bs.dropdown', this.toggle)\n  }\n\n  Dropdown.VERSION = '3.4.1'\n\n  function getParent($this) {\n    var selector = $this.attr('data-target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    var $parent = selector !== '#' ? $(document).find(selector) : null\n\n    return $parent && $parent.length ? $parent : $this.parent()\n  }\n\n  function clearMenus(e) {\n    if (e && e.which === 3) return\n    $(backdrop).remove()\n    $(toggle).each(function () {\n      var $this         = $(this)\n      var $parent       = getParent($this)\n      var relatedTarget = { relatedTarget: this }\n\n      if (!$parent.hasClass('open')) return\n\n      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return\n\n      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))\n\n      if (e.isDefaultPrevented()) return\n\n      $this.attr('aria-expanded', 'false')\n      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))\n    })\n  }\n\n  Dropdown.prototype.toggle = function (e) {\n    var $this = $(this)\n\n    if ($this.is('.disabled, :disabled')) return\n\n    var $parent  = getParent($this)\n    var isActive = $parent.hasClass('open')\n\n    clearMenus()\n\n    if (!isActive) {\n      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\n        // if mobile we use a backdrop because click events don't delegate\n        $(document.createElement('div'))\n          .addClass('dropdown-backdrop')\n          .insertAfter($(this))\n          .on('click', clearMenus)\n      }\n\n      var relatedTarget = { relatedTarget: this }\n      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))\n\n      if (e.isDefaultPrevented()) return\n\n      $this\n        .trigger('focus')\n        .attr('aria-expanded', 'true')\n\n      $parent\n        .toggleClass('open')\n        .trigger($.Event('shown.bs.dropdown', relatedTarget))\n    }\n\n    return false\n  }\n\n  Dropdown.prototype.keydown = function (e) {\n    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return\n\n    var $this = $(this)\n\n    e.preventDefault()\n    e.stopPropagation()\n\n    if ($this.is('.disabled, :disabled')) return\n\n    var $parent  = getParent($this)\n    var isActive = $parent.hasClass('open')\n\n    if (!isActive && e.which != 27 || isActive && e.which == 27) {\n      if (e.which == 27) $parent.find(toggle).trigger('focus')\n      return $this.trigger('click')\n    }\n\n    var desc = ' li:not(.disabled):visible a'\n    var $items = $parent.find('.dropdown-menu' + desc)\n\n    if (!$items.length) return\n\n    var index = $items.index(e.target)\n\n    if (e.which == 38 && index > 0)                 index--         // up\n    if (e.which == 40 && index < $items.length - 1) index++         // down\n    if (!~index)                                    index = 0\n\n    $items.eq(index).trigger('focus')\n  }\n\n\n  // DROPDOWN PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.dropdown')\n\n      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  var old = $.fn.dropdown\n\n  $.fn.dropdown             = Plugin\n  $.fn.dropdown.Constructor = Dropdown\n\n\n  // DROPDOWN NO CONFLICT\n  // ====================\n\n  $.fn.dropdown.noConflict = function () {\n    $.fn.dropdown = old\n    return this\n  }\n\n\n  // APPLY TO STANDARD DROPDOWN ELEMENTS\n  // ===================================\n\n  $(document)\n    .on('click.bs.dropdown.data-api', clearMenus)\n    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })\n    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)\n    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)\n    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: modal.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#modals\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // MODAL CLASS DEFINITION\n  // ======================\n\n  var Modal = function (element, options) {\n    this.options = options\n    this.$body = $(document.body)\n    this.$element = $(element)\n    this.$dialog = this.$element.find('.modal-dialog')\n    this.$backdrop = null\n    this.isShown = null\n    this.originalBodyPad = null\n    this.scrollbarWidth = 0\n    this.ignoreBackdropClick = false\n    this.fixedContent = '.navbar-fixed-top, .navbar-fixed-bottom'\n\n    if (this.options.remote) {\n      this.$element\n        .find('.modal-content')\n        .load(this.options.remote, $.proxy(function () {\n          this.$element.trigger('loaded.bs.modal')\n        }, this))\n    }\n  }\n\n  Modal.VERSION = '3.4.1'\n\n  Modal.TRANSITION_DURATION = 300\n  Modal.BACKDROP_TRANSITION_DURATION = 150\n\n  Modal.DEFAULTS = {\n    backdrop: true,\n    keyboard: true,\n    show: true\n  }\n\n  Modal.prototype.toggle = function (_relatedTarget) {\n    return this.isShown ? this.hide() : this.show(_relatedTarget)\n  }\n\n  Modal.prototype.show = function (_relatedTarget) {\n    var that = this\n    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })\n\n    this.$element.trigger(e)\n\n    if (this.isShown || e.isDefaultPrevented()) return\n\n    this.isShown = true\n\n    this.checkScrollbar()\n    this.setScrollbar()\n    this.$body.addClass('modal-open')\n\n    this.escape()\n    this.resize()\n\n    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this))\n\n    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\n      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\n        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true\n      })\n    })\n\n    this.backdrop(function () {\n      var transition = $.support.transition && that.$element.hasClass('fade')\n\n      if (!that.$element.parent().length) {\n        that.$element.appendTo(that.$body) // don't move modals dom position\n      }\n\n      that.$element\n        .show()\n        .scrollTop(0)\n\n      that.adjustDialog()\n\n      if (transition) {\n        that.$element[0].offsetWidth // force reflow\n      }\n\n      that.$element.addClass('in')\n\n      that.enforceFocus()\n\n      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })\n\n      transition ?\n        that.$dialog // wait for modal to slide in\n          .one('bsTransitionEnd', function () {\n            that.$element.trigger('focus').trigger(e)\n          })\n          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n        that.$element.trigger('focus').trigger(e)\n    })\n  }\n\n  Modal.prototype.hide = function (e) {\n    if (e) e.preventDefault()\n\n    e = $.Event('hide.bs.modal')\n\n    this.$element.trigger(e)\n\n    if (!this.isShown || e.isDefaultPrevented()) return\n\n    this.isShown = false\n\n    this.escape()\n    this.resize()\n\n    $(document).off('focusin.bs.modal')\n\n    this.$element\n      .removeClass('in')\n      .off('click.dismiss.bs.modal')\n      .off('mouseup.dismiss.bs.modal')\n\n    this.$dialog.off('mousedown.dismiss.bs.modal')\n\n    $.support.transition && this.$element.hasClass('fade') ?\n      this.$element\n        .one('bsTransitionEnd', $.proxy(this.hideModal, this))\n        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n      this.hideModal()\n  }\n\n  Modal.prototype.enforceFocus = function () {\n    $(document)\n      .off('focusin.bs.modal') // guard against infinite focus loop\n      .on('focusin.bs.modal', $.proxy(function (e) {\n        if (document !== e.target &&\n          this.$element[0] !== e.target &&\n          !this.$element.has(e.target).length) {\n          this.$element.trigger('focus')\n        }\n      }, this))\n  }\n\n  Modal.prototype.escape = function () {\n    if (this.isShown && this.options.keyboard) {\n      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\n        e.which == 27 && this.hide()\n      }, this))\n    } else if (!this.isShown) {\n      this.$element.off('keydown.dismiss.bs.modal')\n    }\n  }\n\n  Modal.prototype.resize = function () {\n    if (this.isShown) {\n      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))\n    } else {\n      $(window).off('resize.bs.modal')\n    }\n  }\n\n  Modal.prototype.hideModal = function () {\n    var that = this\n    this.$element.hide()\n    this.backdrop(function () {\n      that.$body.removeClass('modal-open')\n      that.resetAdjustments()\n      that.resetScrollbar()\n      that.$element.trigger('hidden.bs.modal')\n    })\n  }\n\n  Modal.prototype.removeBackdrop = function () {\n    this.$backdrop && this.$backdrop.remove()\n    this.$backdrop = null\n  }\n\n  Modal.prototype.backdrop = function (callback) {\n    var that = this\n    var animate = this.$element.hasClass('fade') ? 'fade' : ''\n\n    if (this.isShown && this.options.backdrop) {\n      var doAnimate = $.support.transition && animate\n\n      this.$backdrop = $(document.createElement('div'))\n        .addClass('modal-backdrop ' + animate)\n        .appendTo(this.$body)\n\n      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\n        if (this.ignoreBackdropClick) {\n          this.ignoreBackdropClick = false\n          return\n        }\n        if (e.target !== e.currentTarget) return\n        this.options.backdrop == 'static'\n          ? this.$element[0].focus()\n          : this.hide()\n      }, this))\n\n      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\n\n      this.$backdrop.addClass('in')\n\n      if (!callback) return\n\n      doAnimate ?\n        this.$backdrop\n          .one('bsTransitionEnd', callback)\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n        callback()\n\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass('in')\n\n      var callbackRemove = function () {\n        that.removeBackdrop()\n        callback && callback()\n      }\n      $.support.transition && this.$element.hasClass('fade') ?\n        this.$backdrop\n          .one('bsTransitionEnd', callbackRemove)\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n        callbackRemove()\n\n    } else if (callback) {\n      callback()\n    }\n  }\n\n  // these following methods are used to handle overflowing modals\n\n  Modal.prototype.handleUpdate = function () {\n    this.adjustDialog()\n  }\n\n  Modal.prototype.adjustDialog = function () {\n    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight\n\n    this.$element.css({\n      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\n      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\n    })\n  }\n\n  Modal.prototype.resetAdjustments = function () {\n    this.$element.css({\n      paddingLeft: '',\n      paddingRight: ''\n    })\n  }\n\n  Modal.prototype.checkScrollbar = function () {\n    var fullWindowWidth = window.innerWidth\n    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\n      var documentElementRect = document.documentElement.getBoundingClientRect()\n      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)\n    }\n    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth\n    this.scrollbarWidth = this.measureScrollbar()\n  }\n\n  Modal.prototype.setScrollbar = function () {\n    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)\n    this.originalBodyPad = document.body.style.paddingRight || ''\n    var scrollbarWidth = this.scrollbarWidth\n    if (this.bodyIsOverflowing) {\n      this.$body.css('padding-right', bodyPad + scrollbarWidth)\n      $(this.fixedContent).each(function (index, element) {\n        var actualPadding = element.style.paddingRight\n        var calculatedPadding = $(element).css('padding-right')\n        $(element)\n          .data('padding-right', actualPadding)\n          .css('padding-right', parseFloat(calculatedPadding) + scrollbarWidth + 'px')\n      })\n    }\n  }\n\n  Modal.prototype.resetScrollbar = function () {\n    this.$body.css('padding-right', this.originalBodyPad)\n    $(this.fixedContent).each(function (index, element) {\n      var padding = $(element).data('padding-right')\n      $(element).removeData('padding-right')\n      element.style.paddingRight = padding ? padding : ''\n    })\n  }\n\n  Modal.prototype.measureScrollbar = function () { // thx walsh\n    var scrollDiv = document.createElement('div')\n    scrollDiv.className = 'modal-scrollbar-measure'\n    this.$body.append(scrollDiv)\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\n    this.$body[0].removeChild(scrollDiv)\n    return scrollbarWidth\n  }\n\n\n  // MODAL PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option, _relatedTarget) {\n    return this.each(function () {\n      var $this = $(this)\n      var data = $this.data('bs.modal')\n      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))\n      if (typeof option == 'string') data[option](_relatedTarget)\n      else if (options.show) data.show(_relatedTarget)\n    })\n  }\n\n  var old = $.fn.modal\n\n  $.fn.modal = Plugin\n  $.fn.modal.Constructor = Modal\n\n\n  // MODAL NO CONFLICT\n  // =================\n\n  $.fn.modal.noConflict = function () {\n    $.fn.modal = old\n    return this\n  }\n\n\n  // MODAL DATA-API\n  // ==============\n\n  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\n    var $this = $(this)\n    var href = $this.attr('href')\n    var target = $this.attr('data-target') ||\n      (href && href.replace(/.*(?=#[^\\s]+$)/, '')) // strip for ie7\n\n    var $target = $(document).find(target)\n    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())\n\n    if ($this.is('a')) e.preventDefault()\n\n    $target.one('show.bs.modal', function (showEvent) {\n      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown\n      $target.one('hidden.bs.modal', function () {\n        $this.is(':visible') && $this.trigger('focus')\n      })\n    })\n    Plugin.call($target, option, this)\n  })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: tooltip.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#tooltip\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn']\n\n  var uriAttrs = [\n    'background',\n    'cite',\n    'href',\n    'itemtype',\n    'longdesc',\n    'poster',\n    'src',\n    'xlink:href'\n  ]\n\n  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i\n\n  var DefaultWhitelist = {\n    // Global attributes allowed on any supplied element below.\n    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n    a: ['target', 'href', 'title', 'rel'],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: ['src', 'alt', 'title', 'width', 'height'],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  }\n\n  /**\n   * A pattern that recognizes a commonly useful subset of URLs that are safe.\n   *\n   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\n   */\n  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi\n\n  /**\n   * A pattern that matches safe data URLs. Only matches image, video and audio types.\n   *\n   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\n   */\n  var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i\n\n  function allowedAttribute(attr, allowedAttributeList) {\n    var attrName = attr.nodeName.toLowerCase()\n\n    if ($.inArray(attrName, allowedAttributeList) !== -1) {\n      if ($.inArray(attrName, uriAttrs) !== -1) {\n        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))\n      }\n\n      return true\n    }\n\n    var regExp = $(allowedAttributeList).filter(function (index, value) {\n      return value instanceof RegExp\n    })\n\n    // Check if a regular expression validates the attribute.\n    for (var i = 0, l = regExp.length; i < l; i++) {\n      if (attrName.match(regExp[i])) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {\n    if (unsafeHtml.length === 0) {\n      return unsafeHtml\n    }\n\n    if (sanitizeFn && typeof sanitizeFn === 'function') {\n      return sanitizeFn(unsafeHtml)\n    }\n\n    // IE 8 and below don't support createHTMLDocument\n    if (!document.implementation || !document.implementation.createHTMLDocument) {\n      return unsafeHtml\n    }\n\n    var createdDocument = document.implementation.createHTMLDocument('sanitization')\n    createdDocument.body.innerHTML = unsafeHtml\n\n    var whitelistKeys = $.map(whiteList, function (el, i) { return i })\n    var elements = $(createdDocument.body).find('*')\n\n    for (var i = 0, len = elements.length; i < len; i++) {\n      var el = elements[i]\n      var elName = el.nodeName.toLowerCase()\n\n      if ($.inArray(elName, whitelistKeys) === -1) {\n        el.parentNode.removeChild(el)\n\n        continue\n      }\n\n      var attributeList = $.map(el.attributes, function (el) { return el })\n      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || [])\n\n      for (var j = 0, len2 = attributeList.length; j < len2; j++) {\n        if (!allowedAttribute(attributeList[j], whitelistedAttributes)) {\n          el.removeAttribute(attributeList[j].nodeName)\n        }\n      }\n    }\n\n    return createdDocument.body.innerHTML\n  }\n\n  // TOOLTIP PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Tooltip = function (element, options) {\n    this.type       = null\n    this.options    = null\n    this.enabled    = null\n    this.timeout    = null\n    this.hoverState = null\n    this.$element   = null\n    this.inState    = null\n\n    this.init('tooltip', element, options)\n  }\n\n  Tooltip.VERSION  = '3.4.1'\n\n  Tooltip.TRANSITION_DURATION = 150\n\n  Tooltip.DEFAULTS = {\n    animation: true,\n    placement: 'top',\n    selector: false,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    container: false,\n    viewport: {\n      selector: 'body',\n      padding: 0\n    },\n    sanitize : true,\n    sanitizeFn : null,\n    whiteList : DefaultWhitelist\n  }\n\n  Tooltip.prototype.init = function (type, element, options) {\n    this.enabled   = true\n    this.type      = type\n    this.$element  = $(element)\n    this.options   = this.getOptions(options)\n    this.$viewport = this.options.viewport && $(document).find($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))\n    this.inState   = { click: false, hover: false, focus: false }\n\n    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\n      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\n    }\n\n    var triggers = this.options.trigger.split(' ')\n\n    for (var i = triggers.length; i--;) {\n      var trigger = triggers[i]\n\n      if (trigger == 'click') {\n        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\n      } else if (trigger != 'manual') {\n        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'\n        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'\n\n        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))\n        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\n      }\n    }\n\n    this.options.selector ?\n      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\n      this.fixTitle()\n  }\n\n  Tooltip.prototype.getDefaults = function () {\n    return Tooltip.DEFAULTS\n  }\n\n  Tooltip.prototype.getOptions = function (options) {\n    var dataAttributes = this.$element.data()\n\n    for (var dataAttr in dataAttributes) {\n      if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {\n        delete dataAttributes[dataAttr]\n      }\n    }\n\n    options = $.extend({}, this.getDefaults(), dataAttributes, options)\n\n    if (options.delay && typeof options.delay == 'number') {\n      options.delay = {\n        show: options.delay,\n        hide: options.delay\n      }\n    }\n\n    if (options.sanitize) {\n      options.template = sanitizeHtml(options.template, options.whiteList, options.sanitizeFn)\n    }\n\n    return options\n  }\n\n  Tooltip.prototype.getDelegateOptions = function () {\n    var options  = {}\n    var defaults = this.getDefaults()\n\n    this._options && $.each(this._options, function (key, value) {\n      if (defaults[key] != value) options[key] = value\n    })\n\n    return options\n  }\n\n  Tooltip.prototype.enter = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\n    }\n\n    if (self.tip().hasClass('in') || self.hoverState == 'in') {\n      self.hoverState = 'in'\n      return\n    }\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'in'\n\n    if (!self.options.delay || !self.options.delay.show) return self.show()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'in') self.show()\n    }, self.options.delay.show)\n  }\n\n  Tooltip.prototype.isInStateTrue = function () {\n    for (var key in this.inState) {\n      if (this.inState[key]) return true\n    }\n\n    return false\n  }\n\n  Tooltip.prototype.leave = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\n    }\n\n    if (self.isInStateTrue()) return\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'out'\n\n    if (!self.options.delay || !self.options.delay.hide) return self.hide()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'out') self.hide()\n    }, self.options.delay.hide)\n  }\n\n  Tooltip.prototype.show = function () {\n    var e = $.Event('show.bs.' + this.type)\n\n    if (this.hasContent() && this.enabled) {\n      this.$element.trigger(e)\n\n      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])\n      if (e.isDefaultPrevented() || !inDom) return\n      var that = this\n\n      var $tip = this.tip()\n\n      var tipId = this.getUID(this.type)\n\n      this.setContent()\n      $tip.attr('id', tipId)\n      this.$element.attr('aria-describedby', tipId)\n\n      if (this.options.animation) $tip.addClass('fade')\n\n      var placement = typeof this.options.placement == 'function' ?\n        this.options.placement.call(this, $tip[0], this.$element[0]) :\n        this.options.placement\n\n      var autoToken = /\\s?auto?\\s?/i\n      var autoPlace = autoToken.test(placement)\n      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'\n\n      $tip\n        .detach()\n        .css({ top: 0, left: 0, display: 'block' })\n        .addClass(placement)\n        .data('bs.' + this.type, this)\n\n      this.options.container ? $tip.appendTo($(document).find(this.options.container)) : $tip.insertAfter(this.$element)\n      this.$element.trigger('inserted.bs.' + this.type)\n\n      var pos          = this.getPosition()\n      var actualWidth  = $tip[0].offsetWidth\n      var actualHeight = $tip[0].offsetHeight\n\n      if (autoPlace) {\n        var orgPlacement = placement\n        var viewportDim = this.getPosition(this.$viewport)\n\n        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :\n                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :\n                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :\n                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :\n                    placement\n\n        $tip\n          .removeClass(orgPlacement)\n          .addClass(placement)\n      }\n\n      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n\n      this.applyPlacement(calculatedOffset, placement)\n\n      var complete = function () {\n        var prevHoverState = that.hoverState\n        that.$element.trigger('shown.bs.' + that.type)\n        that.hoverState = null\n\n        if (prevHoverState == 'out') that.leave(that)\n      }\n\n      $.support.transition && this.$tip.hasClass('fade') ?\n        $tip\n          .one('bsTransitionEnd', complete)\n          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n        complete()\n    }\n  }\n\n  Tooltip.prototype.applyPlacement = function (offset, placement) {\n    var $tip   = this.tip()\n    var width  = $tip[0].offsetWidth\n    var height = $tip[0].offsetHeight\n\n    // manually read margins because getBoundingClientRect includes difference\n    var marginTop = parseInt($tip.css('margin-top'), 10)\n    var marginLeft = parseInt($tip.css('margin-left'), 10)\n\n    // we must check for NaN for ie 8/9\n    if (isNaN(marginTop))  marginTop  = 0\n    if (isNaN(marginLeft)) marginLeft = 0\n\n    offset.top  += marginTop\n    offset.left += marginLeft\n\n    // $.fn.offset doesn't round pixel values\n    // so we use setOffset directly with our own function B-0\n    $.offset.setOffset($tip[0], $.extend({\n      using: function (props) {\n        $tip.css({\n          top: Math.round(props.top),\n          left: Math.round(props.left)\n        })\n      }\n    }, offset), 0)\n\n    $tip.addClass('in')\n\n    // check to see if placing tip in new offset caused the tip to resize itself\n    var actualWidth  = $tip[0].offsetWidth\n    var actualHeight = $tip[0].offsetHeight\n\n    if (placement == 'top' && actualHeight != height) {\n      offset.top = offset.top + height - actualHeight\n    }\n\n    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)\n\n    if (delta.left) offset.left += delta.left\n    else offset.top += delta.top\n\n    var isVertical          = /top|bottom/.test(placement)\n    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\n    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'\n\n    $tip.offset(offset)\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\n  }\n\n  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\n    this.arrow()\n      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n      .css(isVertical ? 'top' : 'left', '')\n  }\n\n  Tooltip.prototype.setContent = function () {\n    var $tip  = this.tip()\n    var title = this.getTitle()\n\n    if (this.options.html) {\n      if (this.options.sanitize) {\n        title = sanitizeHtml(title, this.options.whiteList, this.options.sanitizeFn)\n      }\n\n      $tip.find('.tooltip-inner').html(title)\n    } else {\n      $tip.find('.tooltip-inner').text(title)\n    }\n\n    $tip.removeClass('fade in top bottom left right')\n  }\n\n  Tooltip.prototype.hide = function (callback) {\n    var that = this\n    var $tip = $(this.$tip)\n    var e    = $.Event('hide.bs.' + this.type)\n\n    function complete() {\n      if (that.hoverState != 'in') $tip.detach()\n      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.\n        that.$element\n          .removeAttr('aria-describedby')\n          .trigger('hidden.bs.' + that.type)\n      }\n      callback && callback()\n    }\n\n    this.$element.trigger(e)\n\n    if (e.isDefaultPrevented()) return\n\n    $tip.removeClass('in')\n\n    $.support.transition && $tip.hasClass('fade') ?\n      $tip\n        .one('bsTransitionEnd', complete)\n        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n      complete()\n\n    this.hoverState = null\n\n    return this\n  }\n\n  Tooltip.prototype.fixTitle = function () {\n    var $e = this.$element\n    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\n      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\n    }\n  }\n\n  Tooltip.prototype.hasContent = function () {\n    return this.getTitle()\n  }\n\n  Tooltip.prototype.getPosition = function ($element) {\n    $element   = $element || this.$element\n\n    var el     = $element[0]\n    var isBody = el.tagName == 'BODY'\n\n    var elRect    = el.getBoundingClientRect()\n    if (elRect.width == null) {\n      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\n    }\n    var isSvg = window.SVGElement && el instanceof window.SVGElement\n    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.\n    // See https://github.com/twbs/bootstrap/issues/20280\n    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())\n    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\n    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null\n\n    return $.extend({}, elRect, scroll, outerDims, elOffset)\n  }\n\n  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\n    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\n        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }\n\n  }\n\n  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\n    var delta = { top: 0, left: 0 }\n    if (!this.$viewport) return delta\n\n    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0\n    var viewportDimensions = this.getPosition(this.$viewport)\n\n    if (/right|left/.test(placement)) {\n      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll\n      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight\n      if (topEdgeOffset < viewportDimensions.top) { // top overflow\n        delta.top = viewportDimensions.top - topEdgeOffset\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\n      }\n    } else {\n      var leftEdgeOffset  = pos.left - viewportPadding\n      var rightEdgeOffset = pos.left + viewportPadding + actualWidth\n      if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n        delta.left = viewportDimensions.left - leftEdgeOffset\n      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\n      }\n    }\n\n    return delta\n  }\n\n  Tooltip.prototype.getTitle = function () {\n    var title\n    var $e = this.$element\n    var o  = this.options\n\n    title = $e.attr('data-original-title')\n      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\n\n    return title\n  }\n\n  Tooltip.prototype.getUID = function (prefix) {\n    do prefix += ~~(Math.random() * 1000000)\n    while (document.getElementById(prefix))\n    return prefix\n  }\n\n  Tooltip.prototype.tip = function () {\n    if (!this.$tip) {\n      this.$tip = $(this.options.template)\n      if (this.$tip.length != 1) {\n        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\n      }\n    }\n    return this.$tip\n  }\n\n  Tooltip.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\n  }\n\n  Tooltip.prototype.enable = function () {\n    this.enabled = true\n  }\n\n  Tooltip.prototype.disable = function () {\n    this.enabled = false\n  }\n\n  Tooltip.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled\n  }\n\n  Tooltip.prototype.toggle = function (e) {\n    var self = this\n    if (e) {\n      self = $(e.currentTarget).data('bs.' + this.type)\n      if (!self) {\n        self = new this.constructor(e.currentTarget, this.getDelegateOptions())\n        $(e.currentTarget).data('bs.' + this.type, self)\n      }\n    }\n\n    if (e) {\n      self.inState.click = !self.inState.click\n      if (self.isInStateTrue()) self.enter(self)\n      else self.leave(self)\n    } else {\n      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\n    }\n  }\n\n  Tooltip.prototype.destroy = function () {\n    var that = this\n    clearTimeout(this.timeout)\n    this.hide(function () {\n      that.$element.off('.' + that.type).removeData('bs.' + that.type)\n      if (that.$tip) {\n        that.$tip.detach()\n      }\n      that.$tip = null\n      that.$arrow = null\n      that.$viewport = null\n      that.$element = null\n    })\n  }\n\n  Tooltip.prototype.sanitizeHtml = function (unsafeHtml) {\n    return sanitizeHtml(unsafeHtml, this.options.whiteList, this.options.sanitizeFn)\n  }\n\n  // TOOLTIP PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.tooltip')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tooltip\n\n  $.fn.tooltip             = Plugin\n  $.fn.tooltip.Constructor = Tooltip\n\n\n  // TOOLTIP NO CONFLICT\n  // ===================\n\n  $.fn.tooltip.noConflict = function () {\n    $.fn.tooltip = old\n    return this\n  }\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: popover.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#popovers\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // POPOVER PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Popover = function (element, options) {\n    this.init('popover', element, options)\n  }\n\n  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')\n\n  Popover.VERSION  = '3.4.1'\n\n  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  })\n\n\n  // NOTE: POPOVER EXTENDS tooltip.js\n  // ================================\n\n  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)\n\n  Popover.prototype.constructor = Popover\n\n  Popover.prototype.getDefaults = function () {\n    return Popover.DEFAULTS\n  }\n\n  Popover.prototype.setContent = function () {\n    var $tip    = this.tip()\n    var title   = this.getTitle()\n    var content = this.getContent()\n\n    if (this.options.html) {\n      var typeContent = typeof content\n\n      if (this.options.sanitize) {\n        title = this.sanitizeHtml(title)\n\n        if (typeContent === 'string') {\n          content = this.sanitizeHtml(content)\n        }\n      }\n\n      $tip.find('.popover-title').html(title)\n      $tip.find('.popover-content').children().detach().end()[\n        typeContent === 'string' ? 'html' : 'append'\n      ](content)\n    } else {\n      $tip.find('.popover-title').text(title)\n      $tip.find('.popover-content').children().detach().end().text(content)\n    }\n\n    $tip.removeClass('fade top bottom left right in')\n\n    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n    // this manually by checking the contents.\n    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()\n  }\n\n  Popover.prototype.hasContent = function () {\n    return this.getTitle() || this.getContent()\n  }\n\n  Popover.prototype.getContent = function () {\n    var $e = this.$element\n    var o  = this.options\n\n    return $e.attr('data-content')\n      || (typeof o.content == 'function' ?\n        o.content.call($e[0]) :\n        o.content)\n  }\n\n  Popover.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\n  }\n\n\n  // POPOVER PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.popover')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.popover\n\n  $.fn.popover             = Plugin\n  $.fn.popover.Constructor = Popover\n\n\n  // POPOVER NO CONFLICT\n  // ===================\n\n  $.fn.popover.noConflict = function () {\n    $.fn.popover = old\n    return this\n  }\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: scrollspy.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  function ScrollSpy(element, options) {\n    this.$body          = $(document.body)\n    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\n    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)\n    this.selector       = (this.options.target || '') + ' .nav li > a'\n    this.offsets        = []\n    this.targets        = []\n    this.activeTarget   = null\n    this.scrollHeight   = 0\n\n    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))\n    this.refresh()\n    this.process()\n  }\n\n  ScrollSpy.VERSION  = '3.4.1'\n\n  ScrollSpy.DEFAULTS = {\n    offset: 10\n  }\n\n  ScrollSpy.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n  }\n\n  ScrollSpy.prototype.refresh = function () {\n    var that          = this\n    var offsetMethod  = 'offset'\n    var offsetBase    = 0\n\n    this.offsets      = []\n    this.targets      = []\n    this.scrollHeight = this.getScrollHeight()\n\n    if (!$.isWindow(this.$scrollElement[0])) {\n      offsetMethod = 'position'\n      offsetBase   = this.$scrollElement.scrollTop()\n    }\n\n    this.$body\n      .find(this.selector)\n      .map(function () {\n        var $el   = $(this)\n        var href  = $el.data('target') || $el.attr('href')\n        var $href = /^#./.test(href) && $(href)\n\n        return ($href\n          && $href.length\n          && $href.is(':visible')\n          && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n      })\n      .sort(function (a, b) { return a[0] - b[0] })\n      .each(function () {\n        that.offsets.push(this[0])\n        that.targets.push(this[1])\n      })\n  }\n\n  ScrollSpy.prototype.process = function () {\n    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n    var scrollHeight = this.getScrollHeight()\n    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n    var offsets      = this.offsets\n    var targets      = this.targets\n    var activeTarget = this.activeTarget\n    var i\n\n    if (this.scrollHeight != scrollHeight) {\n      this.refresh()\n    }\n\n    if (scrollTop >= maxScroll) {\n      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n    }\n\n    if (activeTarget && scrollTop < offsets[0]) {\n      this.activeTarget = null\n      return this.clear()\n    }\n\n    for (i = offsets.length; i--;) {\n      activeTarget != targets[i]\n        && scrollTop >= offsets[i]\n        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n        && this.activate(targets[i])\n    }\n  }\n\n  ScrollSpy.prototype.activate = function (target) {\n    this.activeTarget = target\n\n    this.clear()\n\n    var selector = this.selector +\n      '[data-target=\"' + target + '\"],' +\n      this.selector + '[href=\"' + target + '\"]'\n\n    var active = $(selector)\n      .parents('li')\n      .addClass('active')\n\n    if (active.parent('.dropdown-menu').length) {\n      active = active\n        .closest('li.dropdown')\n        .addClass('active')\n    }\n\n    active.trigger('activate.bs.scrollspy')\n  }\n\n  ScrollSpy.prototype.clear = function () {\n    $(this.selector)\n      .parentsUntil(this.options.target, '.active')\n      .removeClass('active')\n  }\n\n\n  // SCROLLSPY PLUGIN DEFINITION\n  // ===========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.scrollspy')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.scrollspy\n\n  $.fn.scrollspy             = Plugin\n  $.fn.scrollspy.Constructor = ScrollSpy\n\n\n  // SCROLLSPY NO CONFLICT\n  // =====================\n\n  $.fn.scrollspy.noConflict = function () {\n    $.fn.scrollspy = old\n    return this\n  }\n\n\n  // SCROLLSPY DATA-API\n  // ==================\n\n  $(window).on('load.bs.scrollspy.data-api', function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this)\n      Plugin.call($spy, $spy.data())\n    })\n  })\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: tab.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#tabs\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // TAB CLASS DEFINITION\n  // ====================\n\n  var Tab = function (element) {\n    // jscs:disable requireDollarBeforejQueryAssignment\n    this.element = $(element)\n    // jscs:enable requireDollarBeforejQueryAssignment\n  }\n\n  Tab.VERSION = '3.4.1'\n\n  Tab.TRANSITION_DURATION = 150\n\n  Tab.prototype.show = function () {\n    var $this    = this.element\n    var $ul      = $this.closest('ul:not(.dropdown-menu)')\n    var selector = $this.data('target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    if ($this.parent('li').hasClass('active')) return\n\n    var $previous = $ul.find('.active:last a')\n    var hideEvent = $.Event('hide.bs.tab', {\n      relatedTarget: $this[0]\n    })\n    var showEvent = $.Event('show.bs.tab', {\n      relatedTarget: $previous[0]\n    })\n\n    $previous.trigger(hideEvent)\n    $this.trigger(showEvent)\n\n    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return\n\n    var $target = $(document).find(selector)\n\n    this.activate($this.closest('li'), $ul)\n    this.activate($target, $target.parent(), function () {\n      $previous.trigger({\n        type: 'hidden.bs.tab',\n        relatedTarget: $this[0]\n      })\n      $this.trigger({\n        type: 'shown.bs.tab',\n        relatedTarget: $previous[0]\n      })\n    })\n  }\n\n  Tab.prototype.activate = function (element, container, callback) {\n    var $active    = container.find('> .active')\n    var transition = callback\n      && $.support.transition\n      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)\n\n    function next() {\n      $active\n        .removeClass('active')\n        .find('> .dropdown-menu > .active')\n        .removeClass('active')\n        .end()\n        .find('[data-toggle=\"tab\"]')\n        .attr('aria-expanded', false)\n\n      element\n        .addClass('active')\n        .find('[data-toggle=\"tab\"]')\n        .attr('aria-expanded', true)\n\n      if (transition) {\n        element[0].offsetWidth // reflow for transition\n        element.addClass('in')\n      } else {\n        element.removeClass('fade')\n      }\n\n      if (element.parent('.dropdown-menu').length) {\n        element\n          .closest('li.dropdown')\n          .addClass('active')\n          .end()\n          .find('[data-toggle=\"tab\"]')\n          .attr('aria-expanded', true)\n      }\n\n      callback && callback()\n    }\n\n    $active.length && transition ?\n      $active\n        .one('bsTransitionEnd', next)\n        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :\n      next()\n\n    $active.removeClass('in')\n  }\n\n\n  // TAB PLUGIN DEFINITION\n  // =====================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.tab')\n\n      if (!data) $this.data('bs.tab', (data = new Tab(this)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tab\n\n  $.fn.tab             = Plugin\n  $.fn.tab.Constructor = Tab\n\n\n  // TAB NO CONFLICT\n  // ===============\n\n  $.fn.tab.noConflict = function () {\n    $.fn.tab = old\n    return this\n  }\n\n\n  // TAB DATA-API\n  // ============\n\n  var clickHandler = function (e) {\n    e.preventDefault()\n    Plugin.call($(this), 'show')\n  }\n\n  $(document)\n    .on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler)\n    .on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler)\n\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: affix.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#affix\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // AFFIX CLASS DEFINITION\n  // ======================\n\n  var Affix = function (element, options) {\n    this.options = $.extend({}, Affix.DEFAULTS, options)\n\n    var target = this.options.target === Affix.DEFAULTS.target ? $(this.options.target) : $(document).find(this.options.target)\n\n    this.$target = target\n      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))\n      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))\n\n    this.$element     = $(element)\n    this.affixed      = null\n    this.unpin        = null\n    this.pinnedOffset = null\n\n    this.checkPosition()\n  }\n\n  Affix.VERSION  = '3.4.1'\n\n  Affix.RESET    = 'affix affix-top affix-bottom'\n\n  Affix.DEFAULTS = {\n    offset: 0,\n    target: window\n  }\n\n  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\n    var scrollTop    = this.$target.scrollTop()\n    var position     = this.$element.offset()\n    var targetHeight = this.$target.height()\n\n    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\n\n    if (this.affixed == 'bottom') {\n      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\n      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\n    }\n\n    var initializing   = this.affixed == null\n    var colliderTop    = initializing ? scrollTop : position.top\n    var colliderHeight = initializing ? targetHeight : height\n\n    if (offsetTop != null && scrollTop <= offsetTop) return 'top'\n    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\n\n    return false\n  }\n\n  Affix.prototype.getPinnedOffset = function () {\n    if (this.pinnedOffset) return this.pinnedOffset\n    this.$element.removeClass(Affix.RESET).addClass('affix')\n    var scrollTop = this.$target.scrollTop()\n    var position  = this.$element.offset()\n    return (this.pinnedOffset = position.top - scrollTop)\n  }\n\n  Affix.prototype.checkPositionWithEventLoop = function () {\n    setTimeout($.proxy(this.checkPosition, this), 1)\n  }\n\n  Affix.prototype.checkPosition = function () {\n    if (!this.$element.is(':visible')) return\n\n    var height       = this.$element.height()\n    var offset       = this.options.offset\n    var offsetTop    = offset.top\n    var offsetBottom = offset.bottom\n    var scrollHeight = Math.max($(document).height(), $(document.body).height())\n\n    if (typeof offset != 'object')         offsetBottom = offsetTop = offset\n    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\n    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\n\n    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\n\n    if (this.affixed != affix) {\n      if (this.unpin != null) this.$element.css('top', '')\n\n      var affixType = 'affix' + (affix ? '-' + affix : '')\n      var e         = $.Event(affixType + '.bs.affix')\n\n      this.$element.trigger(e)\n\n      if (e.isDefaultPrevented()) return\n\n      this.affixed = affix\n      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\n\n      this.$element\n        .removeClass(Affix.RESET)\n        .addClass(affixType)\n        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')\n    }\n\n    if (affix == 'bottom') {\n      this.$element.offset({\n        top: scrollHeight - height - offsetBottom\n      })\n    }\n  }\n\n\n  // AFFIX PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.affix')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.affix\n\n  $.fn.affix             = Plugin\n  $.fn.affix.Constructor = Affix\n\n\n  // AFFIX NO CONFLICT\n  // =================\n\n  $.fn.affix.noConflict = function () {\n    $.fn.affix = old\n    return this\n  }\n\n\n  // AFFIX DATA-API\n  // ==============\n\n  $(window).on('load', function () {\n    $('[data-spy=\"affix\"]').each(function () {\n      var $spy = $(this)\n      var data = $spy.data()\n\n      data.offset = data.offset || {}\n\n      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom\n      if (data.offsetTop    != null) data.offset.top    = data.offsetTop\n\n      Plugin.call($spy, data)\n    })\n  })\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n")},,,function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9uZXd0aGVtZS9zYXNzL2FwcC5zY3NzP2ViMTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbmV3dGhlbWUvc2Fzcy9hcHAuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n")},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(_, $) {\n\n__webpack_require__(16);\n\nwindow._ = _;\nwindow.$ = $;\nwindow.jQuery = $;\n__webpack_require__(13);\n__webpack_require__(8);\n__webpack_require__(7);\n__webpack_require__(9);\n__webpack_require__(10);\n__webpack_require__(11);\n__webpack_require__(12);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9uZXd0aGVtZS9qcy9hcHAuanM/ZmY5MCJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJfIiwiJCIsImpRdWVyeSIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUFBLE9BQU9DLENBQVAsR0FBV0EsQ0FBWDtBQUNBRCxPQUFPRSxDQUFQLEdBQVdBLENBQVg7QUFDQUYsT0FBT0csTUFBUCxHQUFnQkQsQ0FBaEI7QUFDQUUsbUJBQU9BLENBQUMsRUFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxDQUFSO0FBQ0FBLG1CQUFPQSxDQUFDLENBQVI7QUFDQUEsbUJBQU9BLENBQUMsQ0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxFQUFSO0FBQ0FBLG1CQUFPQSxDQUFDLEVBQVI7QUFDQUEsbUJBQU9BLENBQUMsRUFBUixFIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuLi9zYXNzL2FwcC5zY3NzJztcblxud2luZG93Ll8gPSBfO1xud2luZG93LiQgPSAkO1xud2luZG93LmpRdWVyeSA9ICQ7XG5yZXF1aXJlKCdib290c3RyYXAtc2FzcycpO1xucmVxdWlyZSgnLi9mdW5jdGlvbnMvbWFpbicpO1xucmVxdWlyZSgnLi9mdW5jdGlvbnMvaGVhZGVyJyk7XG5yZXF1aXJlKCcuL2Z1bmN0aW9ucy9yZWdpc3RyYXRpb24tc3RlcC1vbmUnKTtcbnJlcXVpcmUoJy4vZnVuY3Rpb25zL3JlZ2lzdHJhdGlvbi1zdGVwLXR3bycpO1xucmVxdWlyZSgnLi9mdW5jdGlvbnMvcmV0dXJuJyk7XG5yZXF1aXJlKCcuL3BpeGVsX3BlcmZlY3QvcGl4ZWxfcGVyZmVjdCcpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbmV3dGhlbWUvanMvYXBwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n")},,,,,,,function(module,exports){eval(';(function(window){\nvar hadGlobal = \'Modernizr\' in window;\nvar oldGlobal = window.Modernizr;\n/*! modernizr 3.8.0 (Custom Build) | MIT *\n * https://modernizr.com/download/?-adownload-csstransitions-filereader-history-inlinesvg-localstorage-postmessage-svg-addtest-atrule-domprefixes-hasevent-load-mq-prefixed-prefixedcss-prefixes-printshiv-setclasses-testallprops-testprop-teststyles !*/\n!function(e,t,n){function r(e,t){return typeof e===t}function o(e){var t=E.className,n=Modernizr._config.classPrefix||"";if(x&&(t=t.baseVal),Modernizr._config.enableJSClass){var r=new RegExp("(^|\\\\s)"+n+"no-js(\\\\s|$)");t=t.replace(r,"$1"+n+"js$2")}Modernizr._config.enableClasses&&(e.length>0&&(t+=" "+n+e.join(" "+n)),x?E.className.baseVal=t:E.className=t)}function i(e,t){if("object"==typeof e)for(var n in e)w(e,n)&&i(n,e[n]);else{e=e.toLowerCase();var r=e.split("."),a=Modernizr[r[0]];if(2===r.length&&(a=a[r[1]]),void 0!==a)return Modernizr;t="function"==typeof t?t():t,1===r.length?Modernizr[r[0]]=t:(!Modernizr[r[0]]||Modernizr[r[0]]instanceof Boolean||(Modernizr[r[0]]=new Boolean(Modernizr[r[0]])),Modernizr[r[0]][r[1]]=t),o([(t&&!1!==t?"":"no-")+r.join("-")]),Modernizr._trigger(e,t)}return Modernizr}function a(){return"function"!=typeof t.createElement?t.createElement(arguments[0]):x?t.createElementNS.call(t,"http://www.w3.org/2000/svg",arguments[0]):t.createElement.apply(t,arguments)}function s(){var e=t.body;return e||(e=a(x?"svg":"body"),e.fake=!0),e}function l(e,n,r,o){var i,l,c,u,f="modernizr",d=a("div"),p=s();if(parseInt(r,10))for(;r--;)c=a("div"),c.id=o?o[r]:f+(r+1),d.appendChild(c);return i=a("style"),i.type="text/css",i.id="s"+f,(p.fake?p:d).appendChild(i),p.appendChild(d),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(t.createTextNode(e)),d.id=f,p.fake&&(p.style.background="",p.style.overflow="hidden",u=E.style.overflow,E.style.overflow="hidden",E.appendChild(p)),l=n(d,e),p.fake?(p.parentNode.removeChild(p),E.style.overflow=u,E.offsetHeight):d.parentNode.removeChild(d),!!l}function c(e,t){return!!~(""+e).indexOf(t)}function u(e){return e.replace(/([A-Z])/g,function(e,t){return"-"+t.toLowerCase()}).replace(/^ms-/,"-ms-")}function f(t,n,r){var o;if("getComputedStyle"in e){o=getComputedStyle.call(e,t,n);var i=e.console;if(null!==o)r&&(o=o.getPropertyValue(r));else if(i){var a=i.error?"error":"log";i[a].call(i,"getComputedStyle returning null, its possible modernizr test results are inaccurate")}}else o=!n&&t.currentStyle&&t.currentStyle[r];return o}function d(t,r){var o=t.length;if("CSS"in e&&"supports"in e.CSS){for(;o--;)if(e.CSS.supports(u(t[o]),r))return!0;return!1}if("CSSSupportsRule"in e){for(var i=[];o--;)i.push("("+u(t[o])+":"+r+")");return i=i.join(" or "),l("@supports ("+i+") { #modernizr { position: absolute; } }",function(e){return"absolute"===f(e,null,"position")})}return n}function p(e){return e.replace(/([a-z])-([a-z])/g,function(e,t,n){return t+n.toUpperCase()}).replace(/^-/,"")}function m(e,t,o,i){function s(){u&&(delete F.style,delete F.modElem)}if(i=!r(i,"undefined")&&i,!r(o,"undefined")){var l=d(e,o);if(!r(l,"undefined"))return l}for(var u,f,m,h,v,g=["modernizr","tspan","samp"];!F.style&&g.length;)u=!0,F.modElem=a(g.shift()),F.style=F.modElem.style;for(m=e.length,f=0;f<m;f++)if(h=e[f],v=F.style[h],c(h,"-")&&(h=p(h)),F.style[h]!==n){if(i||r(o,"undefined"))return s(),"pfx"!==t||h;try{F.style[h]=o}catch(e){}if(F.style[h]!==v)return s(),"pfx"!==t||h}return s(),!1}function h(e,t){return function(){return e.apply(t,arguments)}}function v(e,t,n){var o;for(var i in e)if(e[i]in t)return!1===n?e[i]:(o=t[e[i]],r(o,"function")?h(o,n||t):o);return!1}function g(e,t,n,o,i){var a=e.charAt(0).toUpperCase()+e.slice(1),s=(e+" "+T.join(a+" ")+a).split(" ");return r(t,"string")||r(t,"undefined")?m(s,t,o,i):(s=(e+" "+z.join(a+" ")+a).split(" "),v(s,t,n))}function y(e,t,r){return g(e,n,n,t,r)}var S=[],b={_version:"3.8.0",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,t){var n=this;setTimeout(function(){t(n[e])},0)},addTest:function(e,t,n){S.push({name:e,fn:t,options:n})},addAsyncTest:function(e){S.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=b,Modernizr=new Modernizr;var w,C=[],E=t.documentElement,x="svg"===E.nodeName.toLowerCase();!function(){var e={}.hasOwnProperty;w=r(e,"undefined")||r(e.call,"undefined")?function(e,t){return t in e&&r(e.constructor.prototype[t],"undefined")}:function(t,n){return e.call(t,n)}}(),b._l={},b.on=function(e,t){this._l[e]||(this._l[e]=[]),this._l[e].push(t),Modernizr.hasOwnProperty(e)&&setTimeout(function(){Modernizr._trigger(e,Modernizr[e])},0)},b._trigger=function(e,t){if(this._l[e]){var n=this._l[e];setTimeout(function(){var e;for(e=0;e<n.length;e++)(0,n[e])(t)},0),delete this._l[e]}},Modernizr._q.push(function(){b.addTest=i});var _="Moz O ms Webkit",T=b._config.usePrefixes?_.split(" "):[];b._cssomPrefixes=T;var N=function(t){var r,o=L.length,i=e.CSSRule;if(void 0===i)return n;if(!t)return!1;if(t=t.replace(/^@/,""),(r=t.replace(/-/g,"_").toUpperCase()+"_RULE")in i)return"@"+t;for(var a=0;a<o;a++){var s=L[a];if(s.toUpperCase()+"_"+r in i)return"@-"+s.toLowerCase()+"-"+t}return!1};b.atRule=N;var z=b._config.usePrefixes?_.toLowerCase().split(" "):[];b._domPrefixes=z;var M=function(){function e(e,r){var o;return!!e&&(r&&"string"!=typeof r||(r=a(r||"div")),e="on"+e,o=e in r,!o&&t&&(r.setAttribute||(r=a("div")),r.setAttribute(e,""),o="function"==typeof r[e],r[e]!==n&&(r[e]=n),r.removeAttribute(e)),o)}var t=!("onblur"in E);return e}();b.hasEvent=M;x||function(e,t){function n(e,t){var n=e.createElement("p"),r=e.getElementsByTagName("head")[0]||e.documentElement;return n.innerHTML="x<style>"+t+"</style>",r.insertBefore(n.lastChild,r.firstChild)}function r(){var e=E.elements;return"string"==typeof e?e.split(" "):e}function o(e,t){var n=E.elements;"string"!=typeof n&&(n=n.join(" ")),"string"!=typeof e&&(e=e.join(" ")),E.elements=n+" "+e,c(t)}function i(e){var t=C[e[b]];return t||(t={},w++,e[b]=w,C[w]=t),t}function a(e,n,r){if(n||(n=t),v)return n.createElement(e);r||(r=i(n));var o;return o=r.cache[e]?r.cache[e].cloneNode():S.test(e)?(r.cache[e]=r.createElem(e)).cloneNode():r.createElem(e),!o.canHaveChildren||y.test(e)||o.tagUrn?o:r.frag.appendChild(o)}function s(e,n){if(e||(e=t),v)return e.createDocumentFragment();n=n||i(e);for(var o=n.frag.cloneNode(),a=0,s=r(),l=s.length;a<l;a++)o.createElement(s[a]);return o}function l(e,t){t.cache||(t.cache={},t.createElem=e.createElement,t.createFrag=e.createDocumentFragment,t.frag=t.createFrag()),e.createElement=function(n){return E.shivMethods?a(n,e,t):t.createElem(n)},e.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+r().join().replace(/[\\w\\-:]+/g,function(e){return t.createElem(e),t.frag.createElement(e),\'c("\'+e+\'")\'})+");return n}")(E,t.frag)}function c(e){e||(e=t);var r=i(e);return!E.shivCSS||h||r.hasCSS||(r.hasCSS=!!n(e,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),v||l(e,r),e}function u(e){for(var t,n=e.getElementsByTagName("*"),o=n.length,i=RegExp("^(?:"+r().join("|")+")$","i"),a=[];o--;)t=n[o],i.test(t.nodeName)&&a.push(t.applyElement(f(t)));return a}function f(e){for(var t,n=e.attributes,r=n.length,o=e.ownerDocument.createElement(_+":"+e.nodeName);r--;)t=n[r],t.specified&&o.setAttribute(t.nodeName,t.nodeValue);return o.style.cssText=e.style.cssText,o}function d(e){for(var t,n=e.split("{"),o=n.length,i=RegExp("(^|[\\\\s,>+~])("+r().join("|")+")(?=[[\\\\s,>+~#.:]|$)","gi"),a="$1"+_+"\\\\:$2";o--;)t=n[o]=n[o].split("}"),t[t.length-1]=t[t.length-1].replace(i,a),n[o]=t.join("}");return n.join("{")}function p(e){for(var t=e.length;t--;)e[t].removeNode()}function m(e){function t(){clearTimeout(a._removeSheetTimer),r&&r.removeNode(!0),r=null}var r,o,a=i(e),s=e.namespaces,l=e.parentWindow;return!T||e.printShived?e:(void 0===s[_]&&s.add(_),l.attachEvent("onbeforeprint",function(){t();for(var i,a,s,l=e.styleSheets,c=[],f=l.length,p=Array(f);f--;)p[f]=l[f];for(;s=p.pop();)if(!s.disabled&&x.test(s.media)){try{i=s.imports,a=i.length}catch(e){a=0}for(f=0;f<a;f++)p.push(i[f]);try{c.push(s.cssText)}catch(e){}}c=d(c.reverse().join("")),o=u(e),r=n(e,c)}),l.attachEvent("onafterprint",function(){p(o),clearTimeout(a._removeSheetTimer),a._removeSheetTimer=setTimeout(t,500)}),e.printShived=!0,e)}var h,v,g=e.html5||{},y=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,S=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,b="_html5shiv",w=0,C={};!function(){try{var e=t.createElement("a");e.innerHTML="<xyz></xyz>",h="hidden"in e,v=1==e.childNodes.length||function(){t.createElement("a");var e=t.createDocumentFragment();return void 0===e.cloneNode||void 0===e.createDocumentFragment||void 0===e.createElement}()}catch(e){h=!0,v=!0}}();var E={elements:g.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video",version:"3.7.3",shivCSS:!1!==g.shivCSS,supportsUnknownElements:v,shivMethods:!1!==g.shivMethods,type:"default",shivDocument:c,createElement:a,createDocumentFragment:s,addElements:o};e.html5=E,c(t);var x=/^$|\\b(?:all|print)\\b/,_="html5shiv",T=!v&&function(){var n=t.documentElement;return!(void 0===t.namespaces||void 0===t.parentWindow||void 0===n.applyElement||void 0===n.removeNode||void 0===e.attachEvent)}();E.type+=" print",E.shivPrint=m,m(t),"object"==typeof module&&module.exports&&(module.exports=E)}(void 0!==e?e:this,t);var j=function(){},P=function(){};e.console&&(j=function(){var t=console.error?"error":"log";e.console[t].apply(e.console,Array.prototype.slice.call(arguments))},P=function(){var t=console.warn?"warn":"log";e.console[t].apply(e.console,Array.prototype.slice.call(arguments))}),b.load=function(){"yepnope"in e?(P("yepnope.js (aka Modernizr.load) is no longer included as part of Modernizr. yepnope appears to be available on the page, so we’ll use it to handle this call to Modernizr.load, but please update your code to use yepnope directly.\\n See http://github.com/Modernizr/Modernizr/issues/1182 for more information."),e.yepnope.apply(e,[].slice.call(arguments,0))):j("yepnope.js (aka Modernizr.load) is no longer included as part of Modernizr. Get it from http://yepnopejs.com. See http://github.com/Modernizr/Modernizr/issues/1182 for more information.")};var A=function(){var t=e.matchMedia||e.msMatchMedia;return t?function(e){var n=t(e);return n&&n.matches||!1}:function(t){var n=!1;return l("@media "+t+" { #modernizr { position: absolute; } }",function(t){n="absolute"===(e.getComputedStyle?e.getComputedStyle(t,null):t.currentStyle).position}),n}}();b.mq=A;var k={elem:a("modernizr")};Modernizr._q.push(function(){delete k.elem});var F={style:k.elem.style};Modernizr._q.unshift(function(){delete F.style}),b.testAllProps=g;var O=b.prefixed=function(e,t,n){return 0===e.indexOf("@")?N(e):(-1!==e.indexOf("-")&&(e=p(e)),t?g(e,t,n):g(e,"pfx"))},L=b._config.usePrefixes?" -webkit- -moz- -o- -ms- ".split(" "):["",""];b._prefixes=L;b.prefixedCSS=function(e){var t=O(e);return t&&u(t)};b.testAllProps=y;b.testProp=function(e,t,r){return m([e],n,t,r)},b.testStyles=l;Modernizr.addTest("history",function(){var t=navigator.userAgent;return!!t&&((-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone")||"file:"===location.protocol)&&(e.history&&"pushState"in e.history))});var R=!0;try{e.postMessage({toString:function(){R=!1}},"*")}catch(e){}Modernizr.addTest("postmessage",new Boolean("postMessage"in e)),Modernizr.addTest("postmessage.structuredclones",R),Modernizr.addTest("svg",!!t.createElementNS&&!!t.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect),Modernizr.addTest("adownload",!e.externalHost&&"download"in a("a")),Modernizr.addTest("csstransitions",y("transition","all",!0)),Modernizr.addTest("filereader",!!(e.File&&e.FileList&&e.FileReader)),Modernizr.addTest("localstorage",function(){var e="modernizr";try{return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(e){return!1}}),Modernizr.addTest("inlinesvg",function(){var e=a("div");return e.innerHTML="<svg/>","http://www.w3.org/2000/svg"===("undefined"!=typeof SVGRect&&e.firstChild&&e.firstChild.namespaceURI)}),function(){var e,t,n,o,i,a,s;for(var l in S)if(S.hasOwnProperty(l)){if(e=[],t=S[l],t.name&&(e.push(t.name.toLowerCase()),t.options&&t.options.aliases&&t.options.aliases.length))for(n=0;n<t.options.aliases.length;n++)e.push(t.options.aliases[n].toLowerCase());for(o=r(t.fn,"function")?t.fn():t.fn,i=0;i<e.length;i++)a=e[i],s=a.split("."),1===s.length?Modernizr[s[0]]=o:(Modernizr[s[0]]&&(!Modernizr[s[0]]||Modernizr[s[0]]instanceof Boolean)||(Modernizr[s[0]]=new Boolean(Modernizr[s[0]])),Modernizr[s[0]][s[1]]=o),C.push((o?"":"no-")+s.join("-"))}}(),o(C),delete b.addTest,delete b.addAsyncTest;for(var $=0;$<Modernizr._q.length;$++)Modernizr._q[$]();e.Modernizr=Modernizr}(window,document);\nmodule.exports = window.Modernizr;\nif (hadGlobal) { window.Modernizr = oldGlobal; }\nelse { delete window.Modernizr; }\n})(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n')}],[17]);